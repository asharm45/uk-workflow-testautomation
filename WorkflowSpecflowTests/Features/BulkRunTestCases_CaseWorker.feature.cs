// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace WorkflowSpecflowTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class BulkRunTestCasesFeature : object, Xunit.IClassFixture<BulkRunTestCasesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "BulkRunTestCases_CaseWorker.feature"
#line hidden
        
        public BulkRunTestCasesFeature(BulkRunTestCasesFeature.FixtureData fixtureData, WorkflowSpecflowTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en"), "Features", "BulkRunTestCases", "A short summary of the feature", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-146: Create a New Broker Contact and Validate The fields")]
        [Xunit.TraitAttribute("FeatureTitle", "BulkRunTestCases")]
        [Xunit.TraitAttribute("Description", "Work-146: Create a New Broker Contact and Validate The fields")]
        [Xunit.TraitAttribute("Category", "Work-146")]
        [Xunit.TraitAttribute("Category", "BulkCaseworker")]
        [Xunit.TraitAttribute("Category", "smoke")]
        [Xunit.InlineDataAttribute("\'\'", "\'Caseworker\'", "\'2903456\'", "\'Raja\'", "\'Dhoni\'", "\'raja@test.com \'", "\'8907654321\'", "\'John\'", "\'\'", "\'testrip\'", "\'Roof match\'", "\'Core\'", "\'IV54 7QZ\'", new string[0])]
        public void Work_146CreateANewBrokerContactAndValidateTheFields(string team, string role, string contactID, string firstname, string surname, string email, string telephonenumber, string broker, string brokercorrespondenceaddress, string brokerRegion, string brokerArea, string focusvsCore, string postCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-146",
                    "BulkCaseworker",
                    "smoke"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("team", team);
            argumentsOfScenario.Add("role", role);
            argumentsOfScenario.Add("ContactID", contactID);
            argumentsOfScenario.Add("Firstname", firstname);
            argumentsOfScenario.Add("Surname", surname);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Telephonenumber", telephonenumber);
            argumentsOfScenario.Add("Broker", broker);
            argumentsOfScenario.Add("Brokercorrespondenceaddress", brokercorrespondenceaddress);
            argumentsOfScenario.Add("BrokerRegion", brokerRegion);
            argumentsOfScenario.Add("BrokerArea", brokerArea);
            argumentsOfScenario.Add("FocusvsCore", focusvsCore);
            argumentsOfScenario.Add("PostCode", postCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-146: Create a New Broker Contact and Validate The fields", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given(string.Format("User logged in to Dynamics application with {0} and {1} for Contacts", team, role), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.And("User validates The sitemap menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
 testRunner.And("User Clicks on Contacts from Customers AreaGroup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.And("User Clicks on New button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
 testRunner.Then(string.Format("User Enters {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10}", contactID, firstname, surname, email, telephonenumber, broker, brokercorrespondenceaddress, brokerRegion, brokerArea, focusvsCore, postCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 12
 testRunner.And("Validate other fields are present for broker contact", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.Then("User Clicks on Save", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 14
 testRunner.And("User Navigates to My Active Contacts dashboard", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
 testRunner.Then(string.Format("Validate the Contact By Clicking {0}", firstname), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Work-157: Phone call Entity - Data Mapping of Attributes")]
        [Xunit.TraitAttribute("FeatureTitle", "BulkRunTestCases")]
        [Xunit.TraitAttribute("Description", "Work-157: Phone call Entity - Data Mapping of Attributes")]
        [Xunit.TraitAttribute("Category", "Work-157")]
        [Xunit.TraitAttribute("Category", "BulkCaseworker")]
        public void Work_157PhoneCallEntity_DataMappingOfAttributes()
        {
            string[] tagsOfScenario = new string[] {
                    "Work-157",
                    "BulkCaseworker"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-157: Phone call Entity - Data Mapping of Attributes", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 25
 testRunner.Given("User logged in to Dynamics application with \'Caseworker\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 26
 testRunner.When("User \'Caseworker\' creates new case \'TestCase157\' \'I want information\' \'Documents\'" +
                        " \'Send Certificate\' \'sarah marta\' \'PL-HOM10003493441/00\' \'10/10/2024\' \'Motor\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 27
 testRunner.And("User clicks on details tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.And("User selects phone as origin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 30
 testRunner.And("User validates if phone \"Phone\" as origin is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.And("User cancel the case \"TestCase157\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work89 - Change in Primary Demand")]
        [Xunit.TraitAttribute("FeatureTitle", "BulkRunTestCases")]
        [Xunit.TraitAttribute("Description", "Work89 - Change in Primary Demand")]
        [Xunit.TraitAttribute("Category", "work-89")]
        [Xunit.TraitAttribute("Category", "BulkCaseworker")]
        [Xunit.InlineDataAttribute("\'Caseworker\'", "\'CWwork89B\'", "\'I want information\'", "\'Documents\'", "\'Send Certificate\'", "\'Sarah Jones\'", "\'Motor\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", new string[0])]
        public void Work89_ChangeInPrimaryDemand(string userRole, string caseName, string primaryDemand, string demand, string subDemand, string customer, string product, string policyReference, string caseDueDate, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-89",
                    "BulkCaseworker"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseDueDate", caseDueDate);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work89 - Change in Primary Demand", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 35
 testRunner.Given(string.Format("User logged in to Dynamics application with {0}", userRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 36
 testRunner.When(string.Format("User {0} creates new case {1} {2} {3} {4} {5} {6} {7} {8}", userRole, caseName, primaryDemand, demand, subDemand, customer, policyReference, caseDueDate, product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 38
 testRunner.And("user validate the primary demand as \"I want information\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.When("user change the primary demand to \"I want to change\", demand to \"Motor change\" an" +
                        "d subdemand to \"Add Driver\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 40
 testRunner.Then("user validate the primary demand as \"I want to change\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
 testRunner.When("user change the primary demand to \"I want to renew\", demand to \"Renewal\" and subd" +
                        "emand to \"Review Renewal\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
 testRunner.Then("user validate the primary demand as \"I want to renew\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 43
 testRunner.When("user change the primary demand to \"I want to cancel\", demand to \"Cancellation\" an" +
                        "d subdemand to \"Cancellation Request\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 44
 testRunner.Then("user validate the primary demand as \"I want to cancel\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 45
 testRunner.When("user change the primary demand to \"Error Management\", demand to \"Cancel & Replace" +
                        "\" and subdemand to \"NA\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 46
 testRunner.Then("user validate the primary demand as \"Error Management\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 47
 testRunner.And(string.Format("user cancel the case {0}", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-128: Progression of Value-steps Stages")]
        [Xunit.TraitAttribute("FeatureTitle", "BulkRunTestCases")]
        [Xunit.TraitAttribute("Description", "Work-128: Progression of Value-steps Stages")]
        [Xunit.TraitAttribute("Category", "work-128")]
        [Xunit.TraitAttribute("Category", "BulkCaseworker")]
        [Xunit.InlineDataAttribute("\'Caseworker\'", "\'CWwork128\'", "\'I want to change\'", "\'Motor change\'", "\'Add Driver\'", "\'Gary Adams\'", "\'Motor\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", new string[0])]
        public void Work_128ProgressionOfValue_StepsStages(string userRole, string caseName, string primaryDemand, string demand, string subDemand, string customer, string product, string policyReference, string caseDueDate, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-128",
                    "BulkCaseworker"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseDueDate", caseDueDate);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-128: Progression of Value-steps Stages", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 55
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 56
 testRunner.Given(string.Format("User logged in to Dynamics application with {0}", userRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 57
 testRunner.When(string.Format("User {0} creates new case {1} {2} {3} {4} {5} {6} {7} {8}", userRole, caseName, primaryDemand, demand, subDemand, customer, policyReference, caseDueDate, product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 58
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 59
 testRunner.And("user validate the status of the case as \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
 testRunner.When("user click the \'Authentication\' in progression stages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 61
 testRunner.Then(string.Format("user validate the popup along with \'Active for\', {0} and \'Next Stage\' Button", primaryDemand), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 62
 testRunner.When("user click on the \'Next Stage\' Button in progression popup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 63
 testRunner.Then(string.Format("user validate the popup along with \'Active for\', {0}, \'Back\' and \'Next Stage\' But" +
                            "ton", primaryDemand), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 64
 testRunner.When("user click on the \'Previous Stage\' Button in progression bar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 65
 testRunner.Then(string.Format("user validate the popup along with \'Completed\', {0} and \'Set Active\' Button", primaryDemand), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 66
 testRunner.When("user click on the \'Set Active\' Button in progression popup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 67
 testRunner.Then(string.Format("user validate the popup along with \'Active for\', {0}, \'Back\' and \'Next Stage\' But" +
                            "ton", primaryDemand), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 68
 testRunner.When("user click on the \'Next Stage\' Button in progression bar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 69
 testRunner.Then(string.Format("user validate the popup along with \'Inactive\', {0}, \'\' and \'\' Button", primaryDemand), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 70
 testRunner.And(string.Format("user cancel the case {0}", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work56 - Case Progress Save")]
        [Xunit.TraitAttribute("FeatureTitle", "BulkRunTestCases")]
        [Xunit.TraitAttribute("Description", "Work56 - Case Progress Save")]
        [Xunit.TraitAttribute("Category", "work-56")]
        [Xunit.TraitAttribute("Category", "BulkCaseworker")]
        [Xunit.InlineDataAttribute("\'Caseworker\'", "\'CWwork56A\'", "\'I want information\'", "\'Documents\'", "\'Send Certificate\'", "\'Gary Adams\'", "\'Motor\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Caseworker\'", "\'CWwork56B\'", "\'I want to change\'", "\'Motor change\'", "\'Add Driver\'", "\'Sarah Jones\'", "\'Property\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Caseworker\'", "\'CWwork56C\'", "\'I want to cancel\'", "\'Cancellation\'", "\'Cancellation Request\'", "\'Gary Adams\'", "\'Building works\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", new string[0])]
        public void Work56_CaseProgressSave(string userRole, string caseName, string primaryDemand, string demand, string subDemand, string customer, string product, string policyReference, string caseDueDate, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-56",
                    "BulkCaseworker"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseDueDate", caseDueDate);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work56 - Case Progress Save", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 77
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 78
 testRunner.Given(string.Format("User logged in to Dynamics application with {0}", userRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 79
 testRunner.When(string.Format("User {0} creates new case {1} {2} {3} {4} {5} {6} {7} {8}", userRole, caseName, primaryDemand, demand, subDemand, customer, policyReference, caseDueDate, product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 80
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 81
 testRunner.And("user validate the status of the case as \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 82
 testRunner.And(string.Format("user cancel the case {0}", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-130: Validate Case Owner can be switched")]
        [Xunit.TraitAttribute("FeatureTitle", "BulkRunTestCases")]
        [Xunit.TraitAttribute("Description", "Work-130: Validate Case Owner can be switched")]
        [Xunit.TraitAttribute("Category", "Work-130")]
        [Xunit.TraitAttribute("Category", "BulkCaseworker")]
        [Xunit.TraitAttribute("Category", "smoke")]
        [Xunit.InlineDataAttribute("\'\'", "\'Caseworker\'", "\'TestWhatever\'", "\'I want information\'", "\'Documents\'", "\'Send Certificate\'", "\'PL-HOM10003493441/00\'", "\'sarah marta\'", "\'Amitsharma\'", new string[0])]
        public void Work_130ValidateCaseOwnerCanBeSwitched(string team, string role, string caseName, string primaryDemand, string demand, string subDemand, string policyReference, string customer, string owner, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-130",
                    "BulkCaseworker",
                    "smoke"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("team", team);
            argumentsOfScenario.Add("role", role);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Owner", owner);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-130: Validate Case Owner can be switched", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 91
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 92
 testRunner.Given(string.Format("User logged in to Dynamics application with {0} and {1}", team, role), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 93
 testRunner.When(string.Format("User creates new case {0} {1} {2} {3} {4} {5}", caseName, primaryDemand, demand, subDemand, customer, policyReference), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 94
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 95
 testRunner.Then(string.Format("User Changes the {0}", owner), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 96
 testRunner.And(string.Format("Validates Owner is Changed {0}", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-130: Validate Task Owners can be switched")]
        [Xunit.TraitAttribute("FeatureTitle", "BulkRunTestCases")]
        [Xunit.TraitAttribute("Description", "Work-130: Validate Task Owners can be switched")]
        [Xunit.TraitAttribute("Category", "Work-130")]
        [Xunit.TraitAttribute("Category", "BulkCaseworker")]
        [Xunit.TraitAttribute("Category", "smoke")]
        [Xunit.InlineDataAttribute("\'\'", "\'Caseworker\'", "\'TestCase\'", "\'Amitsharma\'", new string[0])]
        public void Work_130ValidateTaskOwnersCanBeSwitched(string team, string role, string demandTask, string owner, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-130",
                    "BulkCaseworker",
                    "smoke"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("team", team);
            argumentsOfScenario.Add("role", role);
            argumentsOfScenario.Add("DemandTask", demandTask);
            argumentsOfScenario.Add("Owner", owner);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-130: Validate Task Owners can be switched", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 103
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 104
 testRunner.Given(string.Format("User logged in to Dynamics application with {0} and {1}", team, role), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 105
 testRunner.When("User clicks on activities tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 106
 testRunner.And("User clicks on task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 107
 testRunner.And(string.Format("User Enters {0}", demandTask), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 108
 testRunner.Then(string.Format("User Changes the {0}", owner), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 109
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-344: Add a new contact and Validate as TDU, Service Delivery")]
        [Xunit.TraitAttribute("FeatureTitle", "BulkRunTestCases")]
        [Xunit.TraitAttribute("Description", "Work-344: Add a new contact and Validate as TDU, Service Delivery")]
        [Xunit.TraitAttribute("Category", "Work-344")]
        [Xunit.TraitAttribute("Category", "BulkCaseworker")]
        [Xunit.InlineDataAttribute("\'\'", "\'Caseworker\'", "\'2903456\'", "\'Raja\'", "\'Dhoni\'", "\'raja@test.com \'", "\'8907654321\'", "\'John\'", "\'\'", "\'testrip\'", "\'Roof match\'", "\'core\'", "\'IV54 7QZ\'", new string[0])]
        public void Work_344AddANewContactAndValidateAsTDUServiceDelivery(string team, string role, string contactID, string firstname, string surname, string email, string telephonenumber, string broker, string brokercorrespondenceaddress, string brokerRegion, string brokerArea, string focusvsCore, string postCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-344",
                    "BulkCaseworker"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("team", team);
            argumentsOfScenario.Add("role", role);
            argumentsOfScenario.Add("ContactID", contactID);
            argumentsOfScenario.Add("Firstname", firstname);
            argumentsOfScenario.Add("Surname", surname);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Telephonenumber", telephonenumber);
            argumentsOfScenario.Add("Broker", broker);
            argumentsOfScenario.Add("Brokercorrespondenceaddress", brokercorrespondenceaddress);
            argumentsOfScenario.Add("BrokerRegion", brokerRegion);
            argumentsOfScenario.Add("BrokerArea", brokerArea);
            argumentsOfScenario.Add("FocusvsCore", focusvsCore);
            argumentsOfScenario.Add("PostCode", postCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-344: Add a new contact and Validate as TDU, Service Delivery", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 116
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 117
 testRunner.Given(string.Format("User logged in to Dynamics application with {0} and {1} for Contacts", team, role), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 118
 testRunner.And("User validates The sitemap menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 119
 testRunner.And("User Clicks on Contacts from Customers AreaGroup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 120
 testRunner.And("User Clicks on New button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 121
 testRunner.Then(string.Format("User Enters {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10}", contactID, firstname, surname, email, telephonenumber, broker, brokercorrespondenceaddress, brokerRegion, brokerArea, focusvsCore, postCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 122
 testRunner.And("Validate Post Code is Present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 123
 testRunner.Then("User Clicks on Save", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 124
 testRunner.And("User Navigates to My Active Contacts dashboard", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 125
 testRunner.Then(string.Format("Validate the Contact {0}", firstname), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-133: Validate the Profile View of Contact")]
        [Xunit.TraitAttribute("FeatureTitle", "BulkRunTestCases")]
        [Xunit.TraitAttribute("Description", "Work-133: Validate the Profile View of Contact")]
        [Xunit.TraitAttribute("Category", "Work-133")]
        [Xunit.TraitAttribute("Category", "BulkCaseworker")]
        [Xunit.TraitAttribute("Category", "smoke")]
        [Xunit.InlineDataAttribute("\'\'", "\'Caseworker\'", "\'Test133A\'", "\'I want information\'", "\'Documents\'", "\'Send Certificate\'", "\'PL-HOM10003493441/00\'", "\'Raja Dhoni\'", "\'Amitsharma\'", "\'Task-133\'", "\'Raja Dhoni\'", new string[0])]
        [Xunit.InlineDataAttribute("\'\'", "\'Caseworker\'", "\'Test133B\'", "\'I want to change\'", "\'Change of Broker\'", "\'Letter of Appointment\'", "\'PL-HOM10003493441/00\'", "\'RupKumar\'", "\'Amitsharma\'", "\'Task-133-2\'", "\'RupKumar\'", new string[0])]
        public void Work_133ValidateTheProfileViewOfContact(string team, string role, string caseName, string primaryDemand, string demand, string subDemand, string policyReference, string customer, string owner, string demandTask, string contactName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-133",
                    "BulkCaseworker",
                    "smoke"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("team", team);
            argumentsOfScenario.Add("role", role);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Owner", owner);
            argumentsOfScenario.Add("DemandTask", demandTask);
            argumentsOfScenario.Add("contactName", contactName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-133: Validate the Profile View of Contact", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 132
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 134
 testRunner.Given(string.Format("User logged in to Dynamics application with {0} and {1}", team, role), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 135
 testRunner.When(string.Format("User creates new case {0} {1} {2} {3} {4} {5}", caseName, primaryDemand, demand, subDemand, customer, policyReference), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 136
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 138
 testRunner.When("User clicks on activities tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 139
 testRunner.And("User clicks on task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 140
 testRunner.And(string.Format("User selects existing case under regarding search bar {0}", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 141
 testRunner.And(string.Format("User Enters {0}", demandTask), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 142
 testRunner.And(string.Format("User Enters Primary Demand {0}", primaryDemand), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 143
 testRunner.Then("User clicks the on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 145
 testRunner.Given("User Clicks on Contacts from Customers AreaGroup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 146
 testRunner.And(string.Format("User Selects the Contact {0}", contactName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 147
 testRunner.Then("User Selects Related", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 148
 testRunner.And("Selects Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 149
 testRunner.And(string.Format("User Validates the Task {0}", demandTask), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 150
 testRunner.Then("User Selects Related", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 151
 testRunner.And("Selects Cases", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 152
 testRunner.And(string.Format("User Validates the Case {0}", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-176: Case Pending/Unpending SLA")]
        [Xunit.TraitAttribute("FeatureTitle", "BulkRunTestCases")]
        [Xunit.TraitAttribute("Description", "Work-176: Case Pending/Unpending SLA")]
        [Xunit.TraitAttribute("Category", "work-176")]
        [Xunit.TraitAttribute("Category", "regression")]
        [Xunit.TraitAttribute("Category", "smoke")]
        [Xunit.TraitAttribute("Category", "BulkCaseworker")]
        [Xunit.InlineDataAttribute("\'Case Worker\'", "\'TestCase1\'", "\'I want information\'", "\'Documents\'", "\'Send Certificate\'", "\'sarah marta\'", "\'Motor\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "5", "\'Save\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Case Worker\'", "\'TestCase2\'", "\'I want information\'", "\'Documents\'", "\'Send Certificate\'", "\'sarah marta\'", "\'Motor\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "5", "\'Save and Close\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Case Worker\'", "\'TestCase3\'", "\'I want information\'", "\'Documents\'", "\'Send Certificate\'", "\'sarah marta\'", "\'Motor\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "5", "\'Save and Route\'", new string[0])]
        public void Work_176CasePendingUnpendingSLA(string userRole, string caseName, string primaryDemand, string demand, string subDemand, string customer, string product, string policyReference, string caseDueDate, string numberOfDays, string saveType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-176",
                    "regression",
                    "smoke",
                    "BulkCaseworker"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseDueDate", caseDueDate);
            argumentsOfScenario.Add("numberOfDays", numberOfDays);
            argumentsOfScenario.Add("SaveType", saveType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-176: Case Pending/Unpending SLA", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 160
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 161
 testRunner.Given("User logged in to Dynamics application with \'Caseworker\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 162
 testRunner.When(string.Format("User {0} creates new case {1} {2} {3} {4} {5} {6} {7} {8}", userRole, caseName, primaryDemand, demand, subDemand, customer, policyReference, caseDueDate, product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 163
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 164
 testRunner.Then("User validate the status of the case", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 165
 testRunner.And("User changes the Case status to \'On Hold\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 166
 testRunner.Then(string.Format("User clicks on {0} button", saveType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 167
 testRunner.And(string.Format("User selects the Case {0} and validates Case Status", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 168
 testRunner.Then(string.Format("user validate the status of the case {0} as \'On Hold\'", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 169
 testRunner.And(string.Format("User selects newly created case {0}", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 170
 testRunner.And("User changes the Case status to \'In Progress\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 171
 testRunner.Then(string.Format("User clicks on {0} button", saveType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 172
 testRunner.And(string.Format("User selects the Case {0} and validates Case Status", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 173
 testRunner.Then(string.Format("user validate the status of the case {0} as \'In Progress\'", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-523: Contact Screen changes")]
        [Xunit.TraitAttribute("FeatureTitle", "BulkRunTestCases")]
        [Xunit.TraitAttribute("Description", "Work-523: Contact Screen changes")]
        [Xunit.TraitAttribute("Category", "Work523,")]
        [Xunit.TraitAttribute("Category", "regression")]
        [Xunit.TraitAttribute("Category", "BulkCaseworker")]
        [Xunit.InlineDataAttribute("\'Maheee\'", "\'Dhoni\'", "\'maheee@test.com\'", "\'Camac\'", "\'12\'", new string[0])]
        public void Work_523ContactScreenChanges(string firstname, string surname, string email, string street, string houseNr, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work523,",
                    "regression",
                    "BulkCaseworker"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Firstname", firstname);
            argumentsOfScenario.Add("Surname", surname);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Street", street);
            argumentsOfScenario.Add("House Nr", houseNr);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-523: Contact Screen changes", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 182
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 183
 testRunner.Given("User logged in to Dynamics application with \'Case Worker\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 184
 testRunner.And("User Clicks on Contacts from Customers AreaGroup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 185
 testRunner.And("User Clicks on New button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 186
 testRunner.Then("details tab in contact screen should be hidden", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 187
 testRunner.Then("Summary page should be displayed for the contact", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 188
 testRunner.Then(string.Format("User Enters Contact details as {0} {1} {2} {3} {4}", firstname, surname, email, street, houseNr), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 189
 testRunner.Then("User Clicks on Save", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 190
 testRunner.Then(string.Format("Summary page should have Correspondence address as Concatenation of {0} and {1}", street, houseNr), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 191
 testRunner.And(string.Format("{0} and {1} should be removed from the form", street, houseNr), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                BulkRunTestCasesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                BulkRunTestCasesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
