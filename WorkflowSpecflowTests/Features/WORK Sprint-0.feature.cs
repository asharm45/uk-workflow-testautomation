// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace WorkflowSpecflowTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class WORKSprint_0FeatureFeature : object, Xunit.IClassFixture<WORKSprint_0FeatureFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "WORK Sprint-0.feature"
#line hidden
        
        public WORKSprint_0FeatureFeature(WORKSprint_0FeatureFeature.FixtureData fixtureData, WorkflowSpecflowTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en"), "Features", "WORK Sprint-0 feature", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-115: Create new Underwriter Authority and Create a new bookable resource val" +
            "idate the fields")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-0 feature")]
        [Xunit.TraitAttribute("Description", "Work-115: Create new Underwriter Authority and Create a new bookable resource val" +
            "idate the fields")]
        [Xunit.TraitAttribute("Category", "Work-115")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.InlineDataAttribute("\'Trading Team leaders\'", "\'Jeevanathan Chandran\'", "\'10000000.00\'", "\'110000.00\'", "\'2500000.00\'", "\'2600000.00\'", "\'3600000.00\'", "\'4500000.00\'", "\'\'", "\'# CCA\'", "\'Sanjay Test\'", "\'\'", new string[0])]
        public void Work_115CreateNewUnderwriterAuthorityAndCreateANewBookableResourceValidateTheFields(string userRoles, string agent, string property, string vehicle, string accumulation, string updatedProperty, string updatedVehicle, string updatedAccumulation, string resourceType, string user, string name, string timeZone, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-115",
                    "admin"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("UserRoles", userRoles);
            argumentsOfScenario.Add("Agent", agent);
            argumentsOfScenario.Add("Property", property);
            argumentsOfScenario.Add("Vehicle", vehicle);
            argumentsOfScenario.Add("Accumulation", accumulation);
            argumentsOfScenario.Add("UpdatedProperty", updatedProperty);
            argumentsOfScenario.Add("UpdatedVehicle", updatedVehicle);
            argumentsOfScenario.Add("UpdatedAccumulation", updatedAccumulation);
            argumentsOfScenario.Add("ResourceType", resourceType);
            argumentsOfScenario.Add("User", user);
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("TimeZone", timeZone);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-115: Create new Underwriter Authority and Create a new bookable resource val" +
                    "idate the fields", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.When("User selects customer admin hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.And("User Clicks On Underwriter Authority", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.Then("User clicks on new button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
 testRunner.And("User Click on New Bookable Resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.And(string.Format("creates new bookable resource {0} {1} {2} {3}", resourceType, user, name, timeZone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.And(string.Format("User creates New UA {0} {1} {2} {3}", agent, property, vehicle, accumulation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.And("User clicks on save and close button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
 testRunner.And(string.Format("User selects the newly created UA with {0} and updated the {1} {2} {3}", agent, updatedProperty, updatedVehicle, updatedAccumulation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
 testRunner.And(string.Format("User validates if UA is updated successfully with {0} {1} {2} {3}", agent, updatedProperty, updatedVehicle, updatedAccumulation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-146: Create a New Broker Contact and Validate The fields")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-0 feature")]
        [Xunit.TraitAttribute("Description", "Work-146: Create a New Broker Contact and Validate The fields")]
        [Xunit.TraitAttribute("Category", "Work-146")]
        [Xunit.TraitAttribute("Category", "Caseworker")]
        [Xunit.TraitAttribute("Category", "smoke")]
        [Xunit.InlineDataAttribute("\'\'", "\'Caseworker\'", "\'2903456\'", "\'Raja\'", "\'Dhoni\'", "\'raja@test.com \'", "\'8907654321\'", "\'John\'", "\'\'", "\'testrip\'", "\'Roof match\'", "\'Core\'", "\'IV54 7QZ\'", new string[0])]
        public void Work_146CreateANewBrokerContactAndValidateTheFields(string team, string role, string contactID, string firstname, string surname, string email, string telephonenumber, string broker, string brokercorrespondenceaddress, string brokerRegion, string brokerArea, string focusvsCore, string postCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-146",
                    "Caseworker",
                    "smoke"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("team", team);
            argumentsOfScenario.Add("role", role);
            argumentsOfScenario.Add("ContactID", contactID);
            argumentsOfScenario.Add("Firstname", firstname);
            argumentsOfScenario.Add("Surname", surname);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Telephonenumber", telephonenumber);
            argumentsOfScenario.Add("Broker", broker);
            argumentsOfScenario.Add("Brokercorrespondenceaddress", brokercorrespondenceaddress);
            argumentsOfScenario.Add("BrokerRegion", brokerRegion);
            argumentsOfScenario.Add("BrokerArea", brokerArea);
            argumentsOfScenario.Add("FocusvsCore", focusvsCore);
            argumentsOfScenario.Add("PostCode", postCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-146: Create a New Broker Contact and Validate The fields", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 28
 testRunner.Given(string.Format("User logged in to Dynamics application with {0} and {1} for Contacts", team, role), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 29
 testRunner.And("User validates The sitemap menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.And("User Clicks on Contacts from Customers AreaGroup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.And("User Clicks on New button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.Then(string.Format("User Enters {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10}", contactID, firstname, surname, email, telephonenumber, broker, brokercorrespondenceaddress, brokerRegion, brokerArea, focusvsCore, postCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 33
 testRunner.And("Validate other fields are present for broker contact", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
 testRunner.Then("User Clicks on Save", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 35
 testRunner.And("User Navigates to My Active Contacts dashboard", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 36
 testRunner.Then(string.Format("Validate the Contact By Clicking {0}", firstname), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-148")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-0 feature")]
        [Xunit.TraitAttribute("Description", "Work-148")]
        [Xunit.TraitAttribute("Category", "Work-148")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "smoke")]
        [Xunit.InlineDataAttribute("\'PL-HOM10002775299/18\'", "\'Anth Bear\'", "\'Test\'", new string[0])]
        public void Work_148(string policy, string contact, string policyContactRole, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-148",
                    "admin",
                    "smoke"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Policy", policy);
            argumentsOfScenario.Add("Contact", contact);
            argumentsOfScenario.Add("PolicyContactRole", policyContactRole);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-148", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 46
 testRunner.Given("User logged in to Dynamics application with \'Admin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 47
 testRunner.Given("User Clicks on Policy Holders from Service AreaGroup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 48
 testRunner.Given("User Clicks on +New button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 49
 testRunner.Then("User Validates new policy holder page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 50
 testRunner.Then(string.Format("User Enter the Policy {0}", policy), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 51
 testRunner.Then(string.Format("User selects the contact {0} and policy contact role {1}", contact, policyContactRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 52
 testRunner.Then("User selects policy holder and primary policy holder", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 53
 testRunner.Then("User clicks on save and close button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 54
 testRunner.Then("User Clicks On Created On and sorts by newer to older", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 55
 testRunner.Then("User selects the policy Holder and Validates", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Work-157: Phone call Entity - Data Mapping of Attributes")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-0 feature")]
        [Xunit.TraitAttribute("Description", "Work-157: Phone call Entity - Data Mapping of Attributes")]
        [Xunit.TraitAttribute("Category", "Work-157")]
        [Xunit.TraitAttribute("Category", "caseworker")]
        public void Work_157PhoneCallEntity_DataMappingOfAttributes()
        {
            string[] tagsOfScenario = new string[] {
                    "Work-157",
                    "caseworker"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-157: Phone call Entity - Data Mapping of Attributes", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 64
 testRunner.Given("User logged in to Dynamics application with \'Caseworker\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 65
 testRunner.When("User \'Caseworker\' creates new case \'TestCase157\' \'I want information\' \'Documents\'" +
                        " \'Send Certificate\' \'sarah marta\' \'PL-HOM10003493441/00\' \'10/10/2024\' \'Motor\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 66
 testRunner.And("User clicks on details tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 67
 testRunner.And("User selects phone as origin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 68
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 69
 testRunner.And("User validates if phone \"Phone\" as origin is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
 testRunner.And("User cancel the case \"TestCase157\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Work-156: Email Entity - Data Mapping of Attributes")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-0 feature")]
        [Xunit.TraitAttribute("Description", "Work-156: Email Entity - Data Mapping of Attributes")]
        [Xunit.TraitAttribute("Category", "Work-156")]
        [Xunit.TraitAttribute("Category", "caseworker")]
        public void Work_156EmailEntity_DataMappingOfAttributes()
        {
            string[] tagsOfScenario = new string[] {
                    "Work-156",
                    "caseworker"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-156: Email Entity - Data Mapping of Attributes", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 74
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 75
 testRunner.Given("User logged in to Dynamics application with \'Caseworker\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 76
 testRunner.When("User \'Caseworker\' creates new case \'TestCase156\' \'I want information\' \'Documents\'" +
                        " \'Send Certificate\' \'sarah marta\' \'PL-HOM10003493441/00\' \'10/10/2024\' \'Property\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 77
 testRunner.And("User clicks on details tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
 testRunner.And("User selects email as origin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 80
 testRunner.And("User validates if email \"Email\" as origin is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 81
 testRunner.And("User cancel the case \"TestCase156\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Work-116: Task Entity - Data Mapping of Attributes")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-0 feature")]
        [Xunit.TraitAttribute("Description", "Work-116: Task Entity - Data Mapping of Attributes")]
        [Xunit.TraitAttribute("Category", "Work-116")]
        [Xunit.TraitAttribute("Category", "admin")]
        public void Work_116TaskEntity_DataMappingOfAttributes()
        {
            string[] tagsOfScenario = new string[] {
                    "Work-116",
                    "admin"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-116: Task Entity - Data Mapping of Attributes", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 85
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 86
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 87
 testRunner.When("User selects customer service hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 88
 testRunner.Then("User clicks on Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 89
 testRunner.When("User clicks on task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fields"});
                table1.AddRow(new string[] {
                            "\'Regarding\'"});
                table1.AddRow(new string[] {
                            "\'Demand Task\'"});
                table1.AddRow(new string[] {
                            "\'Merlin ID\'"});
                table1.AddRow(new string[] {
                            "\'Primary Demand\'"});
                table1.AddRow(new string[] {
                            "\'Task Type\'"});
                table1.AddRow(new string[] {
                            "\'Merlin Task Type\'"});
                table1.AddRow(new string[] {
                            "\'Value Step\'"});
                table1.AddRow(new string[] {
                            "\'Urgent Flag\'"});
                table1.AddRow(new string[] {
                            "\'Status Reason\'"});
                table1.AddRow(new string[] {
                            "\'Task Description\'"});
                table1.AddRow(new string[] {
                            "\'Instructions\'"});
#line 90
 testRunner.Then("User validates the Task fields", ((string)(null)), table1, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Work-114: Demand Entity - Data Mapping of Attributes")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-0 feature")]
        [Xunit.TraitAttribute("Description", "Work-114: Demand Entity - Data Mapping of Attributes")]
        [Xunit.TraitAttribute("Category", "Work-114")]
        [Xunit.TraitAttribute("Category", "admin")]
        public void Work_114DemandEntity_DataMappingOfAttributes()
        {
            string[] tagsOfScenario = new string[] {
                    "Work-114",
                    "admin"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-114: Demand Entity - Data Mapping of Attributes", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 105
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 106
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 107
 testRunner.When("User selects customer admin hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 108
 testRunner.Then("User clicks on Demands", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 109
 testRunner.And("User clicks on New demand", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fields"});
                table2.AddRow(new string[] {
                            "\'Demand Type\'"});
                table2.AddRow(new string[] {
                            "\'Primary Demand\'"});
                table2.AddRow(new string[] {
                            "\'Demand\'"});
                table2.AddRow(new string[] {
                            "\'Subdemand\'"});
                table2.AddRow(new string[] {
                            "\'E2ETask\'"});
                table2.AddRow(new string[] {
                            "\'Primary Product\'"});
#line 110
 testRunner.And("User validates the Demands fields", ((string)(null)), table2, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Work-113: Case Entity - Data Mapping of Attributes")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-0 feature")]
        [Xunit.TraitAttribute("Description", "Work-113: Case Entity - Data Mapping of Attributes")]
        [Xunit.TraitAttribute("Category", "Work-113")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "teamlead")]
        public void Work_113CaseEntity_DataMappingOfAttributes()
        {
            string[] tagsOfScenario = new string[] {
                    "Work-113",
                    "admin",
                    "teamlead"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-113: Case Entity - Data Mapping of Attributes", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 120
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 121
 testRunner.Given("User logged in to Dynamics application with \'Team Lead\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 122
 testRunner.When("User \'Admin\' creates new case \'TestCase113\' \'I want information\' \'Documents\' \'Sen" +
                        "d Certificate\' \'sarah marta\' \'PL-HOM10003493441/00\' \'10/10/2024\' \'Building works" +
                        "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 123
 testRunner.And("User clicks on details tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 124
 testRunner.And("User selects email as origin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 125
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 126
 testRunner.And("User cancel the case \"TestCase113\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Work-159: SLA Stoppage Entity - Data Mapping of Attributes")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-0 feature")]
        [Xunit.TraitAttribute("Description", "Work-159: SLA Stoppage Entity - Data Mapping of Attributes")]
        [Xunit.TraitAttribute("Category", "Work-159")]
        [Xunit.TraitAttribute("Category", "Admin")]
        public void Work_159SLAStoppageEntity_DataMappingOfAttributes()
        {
            string[] tagsOfScenario = new string[] {
                    "Work-159",
                    "Admin"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-159: SLA Stoppage Entity - Data Mapping of Attributes", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 129
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 130
 testRunner.Given("User logged in to Dynamics application with \'Admin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 131
 testRunner.When("User \'Admin\' creates new case \'TestCase159\' \'I want information\' \'Documents\' \'Sen" +
                        "d Certificate\' \'sarah marta\' \'PL-HOM10003493441/00\' \'10/10/2024\' \'Motor\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 132
 testRunner.And("User clicks on SLA Stoppages tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 133
 testRunner.And("User click the New button from SLA Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 134
 testRunner.Then("User validate the fields are displayed \'Case\' \'Pended Time\' and \'Unpended Time\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 135
 testRunner.When("User create new SLA for the caseName \'TestCase159\', pended time as \'today\' and un" +
                        "pended time as \'tomorrow\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 136
 testRunner.And("User click on the Save button in new SLA stoppage page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="WOrk-161: Vaidate the fields present while creating New Account")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-0 feature")]
        [Xunit.TraitAttribute("Description", "WOrk-161: Vaidate the fields present while creating New Account")]
        [Xunit.TraitAttribute("Category", "Work-161")]
        [Xunit.InlineDataAttribute("\'RupKumar\'", new string[0])]
        public void WOrk_161VaidateTheFieldsPresentWhileCreatingNewAccount(string accountName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-161"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("AccountName", accountName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WOrk-161: Vaidate the fields present while creating New Account", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 140
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 141
 testRunner.Given("User logged in to Dynamics application with \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 142
 testRunner.When("User selects customer service hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 143
 testRunner.Given("User Clicks on Accounts Tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 144
 testRunner.And("User Clicks on New button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 145
 testRunner.And(string.Format("User Fills The Details {0}", accountName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 146
 testRunner.Then("User Clicks on Save", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 147
 testRunner.Given("User Clicks on Accounts Tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 148
 testRunner.And(string.Format("User selects the account {0} and Validates The Fields", accountName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 149
 testRunner.Given("User Clicks on Accounts Tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 150
 testRunner.Then(string.Format("User Selects The Account {0}", accountName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 151
 testRunner.Then("User Clicks Delete button and deletes the Case", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-164")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-0 feature")]
        [Xunit.TraitAttribute("Description", "Work-164")]
        [Xunit.TraitAttribute("Category", "work-164")]
        [Xunit.InlineDataAttribute("\'Caseworker\'", "\'Aut1 omation1\'", new string[0])]
        public void Work_164(string userRole, string contactName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-164"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("ContactName", contactName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-164", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 159
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 160
 testRunner.Given(string.Format("User logged in to Dynamics application with {0}", userRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 162
 testRunner.When("The user clicks on Customer Assets dropdown and selects scheduling", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 163
 testRunner.And("The user clicks on Resources", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 164
 testRunner.And(string.Format("The user creates a new Bookable Resource with Contact {0}", contactName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 165
 testRunner.And(string.Format("The user verifies if new Bookable {0} is created", contactName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                WORKSprint_0FeatureFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                WORKSprint_0FeatureFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
