// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace WorkflowSpecflowTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class WORKSprint_11FeatureFeature : object, Xunit.IClassFixture<WORKSprint_11FeatureFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "WORK Sprint-11.feature"
#line hidden
        
        public WORKSprint_11FeatureFeature(WORKSprint_11FeatureFeature.FixtureData fixtureData, WorkflowSpecflowTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en"), "Features", "WORK Sprint-11 feature", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Work-710: Removal of Standard Dashboards")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-11 feature")]
        [Xunit.TraitAttribute("Description", "Work-710: Removal of Standard Dashboards")]
        [Xunit.TraitAttribute("Category", "Work-710")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "teamlead")]
        public void Work_710RemovalOfStandardDashboards()
        {
            string[] tagsOfScenario = new string[] {
                    "Work-710",
                    "admin",
                    "teamlead"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-710: Removal of Standard Dashboards", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.When("User selects customer service hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
 testRunner.And("User clicks on Dashboard", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Dashboards"});
                table3.AddRow(new string[] {
                            "\'Customer Service Operations Dashboard\'"});
                table3.AddRow(new string[] {
                            "\'Connected Customer Service Dashboard\'"});
                table3.AddRow(new string[] {
                            "\'Knowledge Manager\'"});
                table3.AddRow(new string[] {
                            "\'My Knowledge Dashboard\'"});
#line 9
 testRunner.Then("User validates dynamics dashboards are NOT visible", ((string)(null)), table3, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Work-799: (ReParented) Task SLA")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-11 feature")]
        [Xunit.TraitAttribute("Description", "Work-799: (ReParented) Task SLA")]
        [Xunit.TraitAttribute("Category", "Work-799")]
        [Xunit.TraitAttribute("Category", "wip")]
        public void Work_799ReParentedTaskSLA()
        {
            string[] tagsOfScenario = new string[] {
                    "Work-799",
                    "wip"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-799: (ReParented) Task SLA", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 21
 testRunner.Given("User logged in to Dynamics application with \'admin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 22
 testRunner.When("User clicks on activities tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
 testRunner.And("User clicks on task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
 testRunner.Then("User creates task with regarding \'AutomationCase1\' demand task \'ReParentedTask\' a" +
                        "nd validates case due date \'10/10/2024\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
 testRunner.And("User changes regarding \'AutomationCase2\' and validates case due date \'23/08/2025\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-171: Validate task is assigned to the person who has created it")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-11 feature")]
        [Xunit.TraitAttribute("Description", "Work-171: Validate task is assigned to the person who has created it")]
        [Xunit.TraitAttribute("Category", "Work-171")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "teamlead")]
        [Xunit.InlineDataAttribute("\'Caseworker\'", "\'TaskDueDate1\'", "\'I want information\'", "\'Documents\'", "\'Send Certificate\'", "\'sarah marta\'", "\'Property\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "5", new string[0])]
        public void Work_171ValidateTaskIsAssignedToThePersonWhoHasCreatedIt(string userRole, string caseName, string primaryDemand, string demand, string subDemand, string customer, string product, string policyReference, string caseDueDate, string numberOfDays, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-171",
                    "admin",
                    "teamlead"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseDueDate", caseDueDate);
            argumentsOfScenario.Add("numberOfDays", numberOfDays);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-171: Validate task is assigned to the person who has created it", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 30
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 31
 testRunner.When("User selects customer service hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
 testRunner.And(string.Format("User {0} creates new case {1} {2} {3} {4} {5} {6} {7} {8}", userRole, caseName, primaryDemand, demand, subDemand, customer, policyReference, caseDueDate, product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
 testRunner.When("User clicks on activities tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 35
 testRunner.And("User clicks on task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 36
 testRunner.And(string.Format("User creates task with regarding {0} demand task \"task demand\" and validates case" +
                            " due date {1} and primary demand {2}", caseName, numberOfDays, primaryDemand), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
 testRunner.Then("User validates task is assigned to the person who has created it \'Amitsharma Jaip" +
                        "rakash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-171: Validate Task could be assigned to a specific queue manually selected b" +
            "y users by clicking on “Add to Queue”")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-11 feature")]
        [Xunit.TraitAttribute("Description", "Work-171: Validate Task could be assigned to a specific queue manually selected b" +
            "y users by clicking on “Add to Queue”")]
        [Xunit.TraitAttribute("Category", "Work-171")]
        [Xunit.TraitAttribute("Category", "wip")]
        [Xunit.InlineDataAttribute("\'Caseworker\'", "\'TaskDueDate1\'", "\'I want information\'", "\'Documents\'", "\'Send Certificate\'", "\'sarah marta\'", "\'Property\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "5", new string[0])]
        public void Work_171ValidateTaskCouldBeAssignedToASpecificQueueManuallySelectedByUsersByClickingOnAddToQueue(string userRole, string caseName, string primaryDemand, string demand, string subDemand, string customer, string product, string policyReference, string caseDueDate, string numberOfDays, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-171",
                    "wip"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseDueDate", caseDueDate);
            argumentsOfScenario.Add("numberOfDays", numberOfDays);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-171: Validate Task could be assigned to a specific queue manually selected b" +
                    "y users by clicking on “Add to Queue”", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 46
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 47
 testRunner.When("User selects customer service hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 48
 testRunner.And(string.Format("User {0} creates new case {1} {2} {3} {4} {5} {6} {7} {8}", userRole, caseName, primaryDemand, demand, subDemand, customer, policyReference, caseDueDate, product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 50
 testRunner.When("User clicks on activities tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 51
 testRunner.And("User clicks on task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
 testRunner.And(string.Format("User creates task with regarding {0} demand task \"task demand\" and validates case" +
                            " due date {1} and primary demand {2}", caseName, numberOfDays, primaryDemand), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.Then("User click on Add to Queue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 54
 testRunner.And("User assign the task to different queue \'UK Service Centre\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
 testRunner.And("User validates if it is assiged to same queue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-171: Validate Task should be assigned to the queue where the associated case" +
            " is sitting")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-11 feature")]
        [Xunit.TraitAttribute("Description", "Work-171: Validate Task should be assigned to the queue where the associated case" +
            " is sitting")]
        [Xunit.TraitAttribute("Category", "Work-171")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "teamlead")]
        [Xunit.InlineDataAttribute("\'Caseworker\'", "\'TaskDueDate1\'", "\'I want information\'", "\'Documents\'", "\'Send Certificate\'", "\'sarah marta\'", "\'Property\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "5", new string[0])]
        public void Work_171ValidateTaskShouldBeAssignedToTheQueueWhereTheAssociatedCaseIsSitting(string userRole, string caseName, string primaryDemand, string demand, string subDemand, string customer, string product, string policyReference, string caseDueDate, string numberOfDays, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-171",
                    "admin",
                    "teamlead"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseDueDate", caseDueDate);
            argumentsOfScenario.Add("numberOfDays", numberOfDays);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-171: Validate Task should be assigned to the queue where the associated case" +
                    " is sitting", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 64
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 65
 testRunner.When("User selects customer service hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 66
 testRunner.And(string.Format("User {0} creates new case {1} {2} {3} {4} {5} {6} {7} {8}", userRole, caseName, primaryDemand, demand, subDemand, customer, policyReference, caseDueDate, product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 67
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 68
 testRunner.And("User click on Add to Queue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
 testRunner.And("User assign the case to a queue \'UK Service Centre\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
 testRunner.When("User clicks on activities tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 71
 testRunner.And("User clicks on task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
 testRunner.And(string.Format("User creates task with regarding {0} demand task \"task demand\" and validates case" +
                            " due date {1} and primary demand {2}", caseName, numberOfDays, primaryDemand), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
 testRunner.Then("User clicks on Save & Route", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 74
 testRunner.And("User validates task is also assigned to \'UK Service Centre\' queue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-171: Validate Task should be assigned to the queue \'Manual Triage\'")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-11 feature")]
        [Xunit.TraitAttribute("Description", "Work-171: Validate Task should be assigned to the queue \'Manual Triage\'")]
        [Xunit.TraitAttribute("Category", "Work-171")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "teamlead")]
        [Xunit.InlineDataAttribute("\'Caseworker\'", "\'TaskDueDate1\'", "\'I want information\'", "\'Documents\'", "\'Send Certificate\'", "\'sarah marta\'", "\'Property\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "5", new string[0])]
        public void Work_171ValidateTaskShouldBeAssignedToTheQueueManualTriage(string userRole, string caseName, string primaryDemand, string demand, string subDemand, string customer, string product, string policyReference, string caseDueDate, string numberOfDays, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-171",
                    "admin",
                    "teamlead"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseDueDate", caseDueDate);
            argumentsOfScenario.Add("numberOfDays", numberOfDays);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-171: Validate Task should be assigned to the queue \'Manual Triage\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 81
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 82
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 83
 testRunner.When("User selects customer service hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 84
 testRunner.And(string.Format("User {0} creates new case {1} {2} {3} {4} {5} {6} {7} {8}", userRole, caseName, primaryDemand, demand, subDemand, customer, policyReference, caseDueDate, product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 86
 testRunner.And("User makes sure case is not added to any queue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
 testRunner.When("User clicks on activities tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 88
 testRunner.And("User clicks on task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
 testRunner.And(string.Format("User creates task with regarding {0} demand task \"task demand\" and validates case" +
                            " due date {1} and primary demand {2}", caseName, numberOfDays, primaryDemand), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
 testRunner.Then("User validates task is in manual triage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Work-171: Validate Manual Task should be assigned to the person who has created i" +
            "t")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-11 feature")]
        [Xunit.TraitAttribute("Description", "Work-171: Validate Manual Task should be assigned to the person who has created i" +
            "t")]
        [Xunit.TraitAttribute("Category", "Work-171")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "teamlead")]
        public void Work_171ValidateManualTaskShouldBeAssignedToThePersonWhoHasCreatedIt()
        {
            string[] tagsOfScenario = new string[] {
                    "Work-171",
                    "admin",
                    "teamlead"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-171: Validate Manual Task should be assigned to the person who has created i" +
                    "t", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 98
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 99
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 100
 testRunner.When("User selects customer service hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 101
 testRunner.When("User clicks on activities tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 102
 testRunner.And("User clicks on task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
 testRunner.Then("User enters demand task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 104
 testRunner.And("User Selects primary demand \'I want to change\' and saves the task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 105
 testRunner.Then("User validates task is assigned to the person who has created it \'Amitsharma Jaip" +
                        "rakash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-92: Task Categorization - to get Merlin task Inbound Correspondence - Canx R" +
            "equest")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-11 feature")]
        [Xunit.TraitAttribute("Description", "Work-92: Task Categorization - to get Merlin task Inbound Correspondence - Canx R" +
            "equest")]
        [Xunit.TraitAttribute("Category", "Work-92")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "teamlead")]
        [Xunit.InlineDataAttribute("\'PolicyNumber-1212324\'", "\'TestCaseMerlinTask1\'", "\'Inbound Correspondence - Canx Request\'", "\'Inbound Correspondence\'", "\'I want to cancel\'", new string[0])]
        public void Work_92TaskCategorization_ToGetMerlinTaskInboundCorrespondence_CanxRequest(string policyReference, string caseName, string merlinTask, string dynamicsTaskType, string primaryDemand, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-92",
                    "admin",
                    "teamlead"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("MerlinTask", merlinTask);
            argumentsOfScenario.Add("DynamicsTaskType", dynamicsTaskType);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-92: Task Categorization - to get Merlin task Inbound Correspondence - Canx R" +
                    "equest", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 110
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 111
 testRunner.Given(string.Format("User has valid policy reference from Merlin {0}", policyReference), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 112
 testRunner.And(string.Format("User creates a case {0} in Dynamincs using Merlin policy refererce with primary d" +
                            "emand \'I want information\'", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 113
 testRunner.When("User logged into Merlin and updates policy details to get MerlinTask Inbound Corr" +
                        "espondence - Canx Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 114
 testRunner.Then("User gets taskId and make api call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 115
 testRunner.And("User logged into Dynamics and navigates to activities screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 116
 testRunner.When(string.Format("User filters the cases or regarding {0} and checks if new task is created", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 117
 testRunner.And(string.Format("User clicks on new task link and validates the primary demand {0} and task type {" +
                            "1}", primaryDemand, dynamicsTaskType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 118
 testRunner.Then("", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-92: Task Categorization - to get Merlin task Inbound Correspondence - MTA Re" +
            "quest")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-11 feature")]
        [Xunit.TraitAttribute("Description", "Work-92: Task Categorization - to get Merlin task Inbound Correspondence - MTA Re" +
            "quest")]
        [Xunit.TraitAttribute("Category", "Work-92")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "teamlead")]
        [Xunit.InlineDataAttribute("\'PolicyNumber-1212324\'", "\'TestCaseMerlinTask2\'", "\'Inbound Correspondence - MTA Request\'", "\'Inbound Correspondence\'", "\'I want to change\'", new string[0])]
        public void Work_92TaskCategorization_ToGetMerlinTaskInboundCorrespondence_MTARequest(string policyReference, string caseName, string merlinTask, string dynamicsTaskType, string primaryDemand, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-92",
                    "admin",
                    "teamlead"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("MerlinTask", merlinTask);
            argumentsOfScenario.Add("DynamicsTaskType", dynamicsTaskType);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-92: Task Categorization - to get Merlin task Inbound Correspondence - MTA Re" +
                    "quest", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 124
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 125
 testRunner.Given(string.Format("User has valid policy reference from Merlin {0}", policyReference), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 126
 testRunner.And(string.Format("User creates a case {0} in Dynamincs using Merlin policy refererce with primary d" +
                            "emand \'I want information\'", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 127
 testRunner.When("User logged into Merlin and updates policy details to get MerlinTask Inbound Corr" +
                        "espondence - MTA Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 128
 testRunner.Then("User gets taskId and make api call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 129
 testRunner.And("User logged into Dynamics and navigates to activities screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 130
 testRunner.When(string.Format("User filters the cases or regarding {0} and checks if new task is created", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 131
 testRunner.And(string.Format("User clicks on new task link and validates the primary demand {0} and task type {" +
                            "1}", primaryDemand, dynamicsTaskType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 132
 testRunner.Then("", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-92: Task Categorization - to get Merlin task Endorsement construction referr" +
            "al")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-11 feature")]
        [Xunit.TraitAttribute("Description", "Work-92: Task Categorization - to get Merlin task Endorsement construction referr" +
            "al")]
        [Xunit.TraitAttribute("Category", "Work-92")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "teamlead")]
        [Xunit.InlineDataAttribute("\'PolicyNumber-1212324\'", "\'TestCaseMerlinTask3\'", "\'Endorsement construction referral\'", "\'Endorsement Referral\'", "\'I want to change\'", new string[0])]
        public void Work_92TaskCategorization_ToGetMerlinTaskEndorsementConstructionReferral(string policyReference, string caseName, string merlinTask, string dynamicsTaskType, string primaryDemand, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-92",
                    "admin",
                    "teamlead"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("MerlinTask", merlinTask);
            argumentsOfScenario.Add("DynamicsTaskType", dynamicsTaskType);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-92: Task Categorization - to get Merlin task Endorsement construction referr" +
                    "al", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 137
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 138
 testRunner.Given(string.Format("User has valid policy reference from Merlin {0}", policyReference), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 139
 testRunner.And(string.Format("User creates a case {0} in Dynamincs using Merlin policy refererce with primary d" +
                            "emand \'I want information\'", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 140
 testRunner.When("User logged into Merlin and updates policy details to get MerlinTask Endorsement " +
                        "construction referral", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 141
 testRunner.Then("User gets taskId and make api call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 142
 testRunner.And("User logged into Dynamics and navigates to activities screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 143
 testRunner.When(string.Format("User filters the cases or regarding {0} and checks if new task is created", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 144
 testRunner.And(string.Format("User clicks on new task link and validates the primary demand {0} and task type {" +
                            "1}", primaryDemand, dynamicsTaskType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 145
 testRunner.Then("", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-92: Task Categorization - to get Merlin task Update Policy at Renewal")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-11 feature")]
        [Xunit.TraitAttribute("Description", "Work-92: Task Categorization - to get Merlin task Update Policy at Renewal")]
        [Xunit.TraitAttribute("Category", "Work-92")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "teamlead")]
        [Xunit.InlineDataAttribute("\'PolicyNumber-1212324\'", "\'TestCaseMerlinTask4\'", "\'Update Policy at Renewal\'", "\'Review policy at renewal\'", "\'I want to renew\'", new string[0])]
        public void Work_92TaskCategorization_ToGetMerlinTaskUpdatePolicyAtRenewal(string policyReference, string caseName, string merlinTask, string dynamicsTaskType, string primaryDemand, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-92",
                    "admin",
                    "teamlead"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("MerlinTask", merlinTask);
            argumentsOfScenario.Add("DynamicsTaskType", dynamicsTaskType);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-92: Task Categorization - to get Merlin task Update Policy at Renewal", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 151
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 152
 testRunner.Given(string.Format("User has valid policy reference from Merlin {0}", policyReference), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 153
 testRunner.And(string.Format("User creates a case {0} in Dynamincs using Merlin policy refererce with primary d" +
                            "emand \'I want information\'", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 154
 testRunner.When("User logged into Merlin and updates policy details to get MerlinTask Update Polic" +
                        "y at Renewal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 155
 testRunner.Then("User gets taskId and make api call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 156
 testRunner.And("User logged into Dynamics and navigates to activities screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 157
 testRunner.When(string.Format("User filters the cases or regarding {0} and checks if new task is created", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 158
 testRunner.And(string.Format("User clicks on new task link and validates the primary demand {0} and task type {" +
                            "1}", primaryDemand, dynamicsTaskType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 159
 testRunner.Then("", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-92: Task Categorization - to get Merlin task Renewal reminder chaser email")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-11 feature")]
        [Xunit.TraitAttribute("Description", "Work-92: Task Categorization - to get Merlin task Renewal reminder chaser email")]
        [Xunit.TraitAttribute("Category", "Work-92")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "teamlead")]
        [Xunit.InlineDataAttribute("\'PolicyNumber-1212324\'", "\'TestCaseMerlinTask5\'", "\'Renewal reminder chaser email\'", "\'Renewal\'", "\'I want to renew\'", new string[0])]
        public void Work_92TaskCategorization_ToGetMerlinTaskRenewalReminderChaserEmail(string policyReference, string caseName, string merlinTask, string dynamicsTaskType, string primaryDemand, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-92",
                    "admin",
                    "teamlead"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("MerlinTask", merlinTask);
            argumentsOfScenario.Add("DynamicsTaskType", dynamicsTaskType);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-92: Task Categorization - to get Merlin task Renewal reminder chaser email", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 164
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 165
 testRunner.Given(string.Format("User has valid policy reference from Merlin {0}", policyReference), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 166
 testRunner.And(string.Format("User creates a case {0} in Dynamincs using Merlin policy refererce with primary d" +
                            "emand \'I want information\'", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 167
 testRunner.When("User logged into Merlin and updates policy details to get MerlinTask Renewal remi" +
                        "nder chaser email", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 168
 testRunner.Then("User gets taskId and make api call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 169
 testRunner.And("User logged into Dynamics and navigates to activities screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 170
 testRunner.When(string.Format("User filters the cases or regarding {0} and checks if new task is created", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 171
 testRunner.And(string.Format("User clicks on new task link and validates the primary demand {0} and task type {" +
                            "1}", primaryDemand, dynamicsTaskType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 172
 testRunner.Then("", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-92: Task Categorization - to get Merlin task Broker - Inbound Renewal Corres" +
            "pondence (PU)")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-11 feature")]
        [Xunit.TraitAttribute("Description", "Work-92: Task Categorization - to get Merlin task Broker - Inbound Renewal Corres" +
            "pondence (PU)")]
        [Xunit.TraitAttribute("Category", "Work-92")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "teamlead")]
        [Xunit.InlineDataAttribute("\'PolicyNumber-1212324\'", "\'TestCaseMerlinTask6\'", "\'Broker - Inbound Renewal Correspondence (PU)\'", "\'Inbound Renewal Correspondence\'", "\'I want to renew\'", new string[0])]
        public void Work_92TaskCategorization_ToGetMerlinTaskBroker_InboundRenewalCorrespondencePU(string policyReference, string caseName, string merlinTask, string dynamicsTaskType, string primaryDemand, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-92",
                    "admin",
                    "teamlead"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("MerlinTask", merlinTask);
            argumentsOfScenario.Add("DynamicsTaskType", dynamicsTaskType);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-92: Task Categorization - to get Merlin task Broker - Inbound Renewal Corres" +
                    "pondence (PU)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 178
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 179
 testRunner.Given(string.Format("User has valid policy reference from Merlin {0}", policyReference), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 180
 testRunner.And(string.Format("User creates a case {0} in Dynamincs using Merlin policy refererce with primary d" +
                            "emand \'I want information\'", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 181
 testRunner.When("User logged into Merlin and updates policy details to get MerlinTask Broker - Inb" +
                        "ound Renewal Correspondence (PU)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 182
 testRunner.Then("User gets taskId and make api call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 183
 testRunner.And("User logged into Dynamics and navigates to activities screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 184
 testRunner.When(string.Format("User filters the cases or regarding {0} and checks if new task is created", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 185
 testRunner.And(string.Format("User clicks on new task link and validates the primary demand {0} and task type {" +
                            "1}", primaryDemand, dynamicsTaskType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 186
 testRunner.Then("", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                WORKSprint_11FeatureFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                WORKSprint_11FeatureFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
