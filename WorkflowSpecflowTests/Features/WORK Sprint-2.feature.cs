// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace WorkflowSpecflowTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class WORKSprint_2FeatureFeature : object, Xunit.IClassFixture<WORKSprint_2FeatureFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "WORK Sprint-2.feature"
#line hidden
        
        public WORKSprint_2FeatureFeature(WORKSprint_2FeatureFeature.FixtureData fixtureData, WorkflowSpecflowTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en"), "Features", "WORK Sprint-2 feature", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-105: Validate admin or teamlead can add new Underwriter Authority")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-2 feature")]
        [Xunit.TraitAttribute("Description", "Work-105: Validate admin or teamlead can add new Underwriter Authority")]
        [Xunit.TraitAttribute("Category", "Work-105")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "teamlead")]
        [Xunit.InlineDataAttribute("\'Amitsharma Jaiprakash\'", "\'2500000.00\'", "\'3500000.00\'", "\'4500000.00\'", new string[0])]
        public void Work_105ValidateAdminOrTeamleadCanAddNewUnderwriterAuthority(string agent, string property, string vehicle, string accumulation, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-105",
                    "admin",
                    "teamlead"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Agent", agent);
            argumentsOfScenario.Add("Property", property);
            argumentsOfScenario.Add("Vehicle", vehicle);
            argumentsOfScenario.Add("Accumulation", accumulation);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-105: Validate admin or teamlead can add new Underwriter Authority", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.When("User selects customer admin hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 7
 testRunner.And("User Clicks On Underwriter Authority", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 8
 testRunner.Then("User clicks on new button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 9
 testRunner.And("User validates all the fields visible \'Agent\' \'Property only\' \'Motor only single " +
                        "vehicle\' and \'Motor total accumulation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.Then("User validates error messages on UA screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
 testRunner.And(string.Format("User creates New UA {0} {1} {2} {3}", agent, property, vehicle, accumulation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.And("User clicks on save and close button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.And(string.Format("User validate UA is saved and created successfully with {0} {1} {2} {3}", agent, property, vehicle, accumulation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.And(string.Format("User deletes the UA {0}", agent), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-105: Validate admin or teamlead can share Underwriter Authority")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-2 feature")]
        [Xunit.TraitAttribute("Description", "Work-105: Validate admin or teamlead can share Underwriter Authority")]
        [Xunit.TraitAttribute("Category", "Work-105")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "teamlead")]
        [Xunit.InlineDataAttribute("\'Amitsharma Jaiprakash\'", "\'2500000.00\'", "\'3500000.00\'", "\'4500000.00\'", "\'Sanjay Jayakumar\'", new string[0])]
        public void Work_105ValidateAdminOrTeamleadCanShareUnderwriterAuthority(string agent, string property, string vehicle, string accumulation, string shareWith, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-105",
                    "admin",
                    "teamlead"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Agent", agent);
            argumentsOfScenario.Add("Property", property);
            argumentsOfScenario.Add("Vehicle", vehicle);
            argumentsOfScenario.Add("Accumulation", accumulation);
            argumentsOfScenario.Add("ShareWith", shareWith);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-105: Validate admin or teamlead can share Underwriter Authority", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 23
 testRunner.When("User selects customer admin hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 24
 testRunner.And("User Clicks On Underwriter Authority", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.Then("User clicks on new button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
 testRunner.And(string.Format("User creates New UA {0} {1} {2} {3}", agent, property, vehicle, accumulation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.And("User clicks on save", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.Then("User clicks on share and manage access", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 29
 testRunner.And(string.Format("User share it with {0} and grants the permission and click on share button", shareWith), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.And("User deletes the UA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-105: Validate admin or teamlead can assign Underwriter Authority")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-2 feature")]
        [Xunit.TraitAttribute("Description", "Work-105: Validate admin or teamlead can assign Underwriter Authority")]
        [Xunit.TraitAttribute("Category", "Work-105")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "teamlead")]
        [Xunit.InlineDataAttribute("\'Amitsharma Jaiprakash\'", "\'2500000.00\'", "\'3500000.00\'", "\'4500000.00\'", "\'Trading\'", new string[0])]
        public void Work_105ValidateAdminOrTeamleadCanAssignUnderwriterAuthority(string agent, string property, string vehicle, string accumulation, string assignTo, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-105",
                    "admin",
                    "teamlead"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Agent", agent);
            argumentsOfScenario.Add("Property", property);
            argumentsOfScenario.Add("Vehicle", vehicle);
            argumentsOfScenario.Add("Accumulation", accumulation);
            argumentsOfScenario.Add("AssignTo", assignTo);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-105: Validate admin or teamlead can assign Underwriter Authority", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 38
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 39
 testRunner.When("User selects customer admin hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 40
 testRunner.And("User Clicks On Underwriter Authority", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
 testRunner.Then("User clicks on new button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 42
 testRunner.And(string.Format("User creates New UA {0} {1} {2} {3}", agent, property, vehicle, accumulation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
 testRunner.And("User clicks on save", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
 testRunner.Then("User clicks on assign button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 45
 testRunner.And(string.Format("User assign it to {0} and clicks on assign button", assignTo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
 testRunner.And("User deletes the UA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-105: Validate admin or teamlead can update existing Underwriter Authority")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-2 feature")]
        [Xunit.TraitAttribute("Description", "Work-105: Validate admin or teamlead can update existing Underwriter Authority")]
        [Xunit.TraitAttribute("Category", "Work-105")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "teamlead")]
        [Xunit.InlineDataAttribute("\'Amitsharma Jaiprakash\'", "\'2500000.00\'", "\'3500000.00\'", "\'4500000.00\'", "\'Aravind Dakarapu\'", "\'2600000.00\'", "\'3600000.00\'", "\'4600000.00\'", new string[0])]
        public void Work_105ValidateAdminOrTeamleadCanUpdateExistingUnderwriterAuthority(string agent, string property, string vehicle, string accumulation, string newAgent, string newProperty, string newVehicle, string newAccumulation, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-105",
                    "admin",
                    "teamlead"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Agent", agent);
            argumentsOfScenario.Add("Property", property);
            argumentsOfScenario.Add("Vehicle", vehicle);
            argumentsOfScenario.Add("Accumulation", accumulation);
            argumentsOfScenario.Add("NewAgent", newAgent);
            argumentsOfScenario.Add("NewProperty", newProperty);
            argumentsOfScenario.Add("NewVehicle", newVehicle);
            argumentsOfScenario.Add("NewAccumulation", newAccumulation);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-105: Validate admin or teamlead can update existing Underwriter Authority", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 54
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 55
 testRunner.When("User selects customer admin hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 56
 testRunner.And("User Clicks On Underwriter Authority", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
 testRunner.Then("User clicks on new button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 58
 testRunner.And("User validates all the fields visible \'Agent\' \'Property only\' \'Motor only single " +
                        "vehicle\' and \'Motor total accumulation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
 testRunner.And(string.Format("User creates New UA {0} {1} {2} {3}", agent, property, vehicle, accumulation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
 testRunner.And("User clicks on save and close button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
 testRunner.And(string.Format("User selects the newly created UA with {0} and updated the {1} {2} {3} {4}", agent, newAgent, newProperty, newVehicle, newAccumulation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
 testRunner.Then(string.Format("User validates if UA is updated successfully with {0} {1} {2} {3}", newAgent, newProperty, newVehicle, newAccumulation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 63
 testRunner.And(string.Format("User deletes the UA {0}", newAgent), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-105: Validate admin or teamlead can delete existing Underwriter Authority")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-2 feature")]
        [Xunit.TraitAttribute("Description", "Work-105: Validate admin or teamlead can delete existing Underwriter Authority")]
        [Xunit.TraitAttribute("Category", "Work-105")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "teamlead")]
        [Xunit.InlineDataAttribute("\'Amitsharma Jaiprakash\'", "\'2500000.00\'", "\'3500000.00\'", "\'4500000.00\'", new string[0])]
        public void Work_105ValidateAdminOrTeamleadCanDeleteExistingUnderwriterAuthority(string agent, string property, string vehicle, string accumulation, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-105",
                    "admin",
                    "teamlead"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Agent", agent);
            argumentsOfScenario.Add("Property", property);
            argumentsOfScenario.Add("Vehicle", vehicle);
            argumentsOfScenario.Add("Accumulation", accumulation);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-105: Validate admin or teamlead can delete existing Underwriter Authority", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 70
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 71
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 72
 testRunner.When("User selects customer admin hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 73
 testRunner.And("User Clicks On Underwriter Authority", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
 testRunner.Then("User clicks on new button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 75
 testRunner.And("User validates all the fields visible \'Agent\' \'Property only\' \'Motor only single " +
                        "vehicle\' and \'Motor total accumulation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
 testRunner.And(string.Format("User creates New UA {0} {1} {2} {3}", agent, property, vehicle, accumulation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
 testRunner.And("User clicks on save and close button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
 testRunner.And(string.Format("User deletes the UA {0}", agent), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                WORKSprint_2FeatureFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                WORKSprint_2FeatureFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
