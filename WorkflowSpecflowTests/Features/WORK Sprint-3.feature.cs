// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace WorkflowSpecflowTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class WORKSprint_3FeatureFeature : object, Xunit.IClassFixture<WORKSprint_3FeatureFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "WORK Sprint-3.feature"
#line hidden
        
        public WORKSprint_3FeatureFeature(WORKSprint_3FeatureFeature.FixtureData fixtureData, WorkflowSpecflowTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en"), "Features", "WORK Sprint-3 feature", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-134: Validate the Merlin Task ID field")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-3 feature")]
        [Xunit.TraitAttribute("Description", "Work-134: Validate the Merlin Task ID field")]
        [Xunit.TraitAttribute("Category", "work-134")]
        [Xunit.InlineDataAttribute("\'Admin\'", "\'TestCase126C\'", "\'I want to cancel\'", "\'Cancellation\'", "\'Cancellation Request\'", "\'sarah marta\'", "\'Motor\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "\'Request complete - error correction\'", "\'Resolve cancel request\'", new string[0])]
        public void Work_134ValidateTheMerlinTaskIDField(string userRole, string caseName, string primaryDemand, string demand, string subDemand, string customer, string product, string policyReference, string caseDueDate, string resolutionType, string resolution, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-134"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseDueDate", caseDueDate);
            argumentsOfScenario.Add("ResolutionType", resolutionType);
            argumentsOfScenario.Add("Resolution", resolution);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-134: Validate the Merlin Task ID field", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given(string.Format("User logged in to Dynamics application with {0}", userRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.When(string.Format("User {0} creates new case {1} {2} {3} {4} {5} {6} {7} {8}", userRole, caseName, primaryDemand, demand, subDemand, customer, policyReference, caseDueDate, product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 7
 testRunner.When("User clicks on activities tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
 testRunner.And("User clicks on task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
 testRunner.And(string.Format("User selects existing case under regarding search bar {0}", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.Then("User validates all the fields under details section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
 testRunner.And("User enter demand task details \"Cancellation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.And("User validates Merlin task id field is disabled & read only", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.And("User enters task details primary demand \"I want to cancel\" task type \"Cancellatio" +
                        "n\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.And("User validates merlinTaskType \"Broker - Cancellation Request\" and valueStep \"Unde" +
                        "rstand My Request/Assess Information Provided\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
 testRunner.And("User enters  task description \"Creating task for testing\" and instruction field \"" +
                        "Testing purpose\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 17
 testRunner.And(string.Format("User cancels the case with tasks {0}", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Work-134: Validate the Merlin Task Unique Identifier - After task API Integration" +
            ".")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-3 feature")]
        [Xunit.TraitAttribute("Description", "Work-134: Validate the Merlin Task Unique Identifier - After task API Integration" +
            ".")]
        [Xunit.TraitAttribute("Category", "tag1")]
        public void Work_134ValidateTheMerlinTaskUniqueIdentifier_AfterTaskAPIIntegration_()
        {
            string[] tagsOfScenario = new string[] {
                    "tag1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-134: Validate the Merlin Task Unique Identifier - After task API Integration" +
                    ".", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 25
 testRunner.When("User creates new case with CaseName \"TestCase7\" PrimaryDemand \"I want to cancel\" " +
                        "Demand \"Cancellation\" SubDemand \"Cancellation\" Customer \"Anth Bear\" PolicyRefere" +
                        "nce \"Hom-1290009253\" CaseDueDate \"10/10/2024\" \"Home\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 26
 testRunner.When("User clicks on activities tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-86: Send an Email from Dynamics 365 without attachment")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-3 feature")]
        [Xunit.TraitAttribute("Description", "Work-86: Send an Email from Dynamics 365 without attachment")]
        [Xunit.TraitAttribute("Category", "work-86")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.InlineDataAttribute("\'test_uksc_dynamics\'", "\'Amitsharma Jaiprakash\'", "\'Email from Dynamics - without attachment\'", "\'This emailis from Dynamics 365\'", "\'No\'", "\'Not requried\'", new string[0])]
        public void Work_86SendAnEmailFromDynamics365WithoutAttachment(string from, string to, string subject, string body, string attachment, string attachmentPath, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-86",
                    "admin"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("From", from);
            argumentsOfScenario.Add("To", to);
            argumentsOfScenario.Add("Subject", subject);
            argumentsOfScenario.Add("Body", body);
            argumentsOfScenario.Add("Attachment", attachment);
            argumentsOfScenario.Add("AttachmentPath", attachmentPath);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-86: Send an Email from Dynamics 365 without attachment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 31
 testRunner.Given("User logged in to Dynamics application with \'Admin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
 testRunner.When("User selects customer service hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
 testRunner.Then("User clicks on Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
 testRunner.And("User clicks on Emails", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
 testRunner.Then(string.Format("User enters from {0} to {1} subject {2} body {3} and attach files {4} with file p" +
                            "ath {5}", from, to, subject, body, attachment, attachmentPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 36
 testRunner.And("User clicks on send button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
 testRunner.And(string.Format("User validates if email {0} has sent successfully", subject), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-86: Send an Email from Dynamics 365 with attachment")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-3 feature")]
        [Xunit.TraitAttribute("Description", "Work-86: Send an Email from Dynamics 365 with attachment")]
        [Xunit.TraitAttribute("Category", "work-86")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.InlineDataAttribute("\'test_uksc_dynamics\'", "\'Amitsharma Jaiprakash\'", "\'Email from Dynamics - with attachment\'", "\'This emailis from Dynamics 365\'", "\'Yes\'", "\'\'", new string[0])]
        public void Work_86SendAnEmailFromDynamics365WithAttachment(string from, string to, string subject, string body, string attachment, string attachmentPath, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-86",
                    "admin"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("From", from);
            argumentsOfScenario.Add("To", to);
            argumentsOfScenario.Add("Subject", subject);
            argumentsOfScenario.Add("Body", body);
            argumentsOfScenario.Add("Attachment", attachment);
            argumentsOfScenario.Add("AttachmentPath", attachmentPath);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-86: Send an Email from Dynamics 365 with attachment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 44
 testRunner.Given("User logged in to Dynamics application with \'Admin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 45
 testRunner.When("User selects customer service hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 46
 testRunner.Then("User clicks on Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 47
 testRunner.And("User clicks on Emails", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
 testRunner.Then(string.Format("User enters from {0} to {1} subject {2} body {3} and attach files {4} with file p" +
                            "ath {5}", from, to, subject, body, attachment, attachmentPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 49
 testRunner.And("User clicks on send button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 50
 testRunner.And(string.Format("User validates if email {0} has sent successfully", subject), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-53: Create a case and assoicate a task with it.")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-3 feature")]
        [Xunit.TraitAttribute("Description", "Work-53: Create a case and assoicate a task with it.")]
        [Xunit.TraitAttribute("Category", "work-53")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.InlineDataAttribute("\'Sep 17\'", "\'I want information\'", "\'Documents\'", "\'Send Certificate\'", "\'PL-HOM10003493441/00\'", "\'Raja Dhoni\'", "\'Amitsharma\'", "\'My demand\'", "\'Raja Dhoni\'", "\'Follow up\'", new string[0])]
        public void Work_53CreateACaseAndAssoicateATaskWithIt_(string caseName, string primaryDemand, string demand, string subDemand, string policyReference, string customer, string owner, string demandTask, string contactName, string taskType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-53",
                    "admin"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Owner", owner);
            argumentsOfScenario.Add("DemandTask", demandTask);
            argumentsOfScenario.Add("contactName", contactName);
            argumentsOfScenario.Add("TaskType", taskType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-53: Create a case and assoicate a task with it.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 59
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 60
 testRunner.When("User selects customer service hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "userRole",
                            "CaseName",
                            "PrimaryDemand",
                            "Demand",
                            "SubDemand",
                            "Customer",
                            "Product",
                            "PolicyReference",
                            "CaseDueDate",
                            "numberOfDays"});
                table4.AddRow(new string[] {
                            "\'Admin\'",
                            "\'Sep 17\'",
                            "\'I want to change\'",
                            "\'Change of Broker\'",
                            "\'Letter of Appointment\'",
                            "\'Rad test Account\'",
                            "\'Property\'",
                            "\'PL-HOM0000010003/01\'",
                            "\'10/10/2024\'",
                            "5"});
#line 61
 testRunner.Then("User creates new case and validates case status, case due date, case number and s" +
                        "itemap", ((string)(null)), table4, "Then ");
#line hidden
#line 64
 testRunner.When("User clicks on activities tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 65
 testRunner.And("User clicks on task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 66
 testRunner.And(string.Format("User selects existing case under regarding search bar {0}", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 67
 testRunner.And(string.Format("User Enters {0}", demandTask), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 68
 testRunner.And(string.Format("User Enters Primary Demand {0}", primaryDemand), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
 testRunner.And(string.Format("User Clicks on Task Type {0}", taskType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
 testRunner.Then("User clicks the on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-53: SN.2 User is able to update the created case")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-3 feature")]
        [Xunit.TraitAttribute("Description", "Work-53: SN.2 User is able to update the created case")]
        [Xunit.TraitAttribute("Category", "work-53")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.InlineDataAttribute("\'\'", "\'Caseworker\'", "\'Test133\'", "\'I want to cancel\'", "\'Documents\'", "\'Send Certificate\'", "\'PL-HOM10003493441/00\'", "\'Raja Dhoni\'", "\'Amitsharma\'", "\'My demand\'", "\'Raja Dhoni\'", "\'Action Required\'", new string[0])]
        public void Work_53SN_2UserIsAbleToUpdateTheCreatedCase(string team, string role, string caseName, string primaryDemand, string demand, string subDemand, string policyReference, string customer, string owner, string demandTask, string contactName, string taskType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-53",
                    "admin"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("team", team);
            argumentsOfScenario.Add("role", role);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Owner", owner);
            argumentsOfScenario.Add("DemandTask", demandTask);
            argumentsOfScenario.Add("contactName", contactName);
            argumentsOfScenario.Add("TaskType", taskType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-53: SN.2 User is able to update the created case", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 79
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 80
 testRunner.Given(string.Format("User logged in to Dynamics application with {0} and {1}", team, role), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 81
 testRunner.When("User clicks on activities tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 82
 testRunner.And("User switches to All activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 83
 testRunner.When(string.Format("User searches the the demand task {0}", demandTask), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 84
 testRunner.And(string.Format("User clicks on the task {0}", demandTask), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
 testRunner.And(string.Format("User Enters Primary Demand {0}", primaryDemand), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
 testRunner.When(string.Format("User Clicks on Task Type {0}", taskType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 87
 testRunner.Then("User clicks the on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-53: User is able to delete the case")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-3 feature")]
        [Xunit.TraitAttribute("Description", "Work-53: User is able to delete the case")]
        [Xunit.TraitAttribute("Category", "work-53")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.InlineDataAttribute("\'\'", "\'Caseworker\'", "\'Test133\'", "\'I want to cancel\'", "\'Documents\'", "\'Send Certificate\'", "\'PL-HOM10003493441/00\'", "\'Raja Dhoni\'", "\'Amitsharma\'", "\'My demand\'", "\'Raja Dhoni\'", "\'Action Required\'", new string[0])]
        public void Work_53UserIsAbleToDeleteTheCase(string team, string role, string caseName, string primaryDemand, string demand, string subDemand, string policyReference, string customer, string owner, string demandTask, string contactName, string taskType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-53",
                    "admin"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("team", team);
            argumentsOfScenario.Add("role", role);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Owner", owner);
            argumentsOfScenario.Add("DemandTask", demandTask);
            argumentsOfScenario.Add("contactName", contactName);
            argumentsOfScenario.Add("TaskType", taskType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-53: User is able to delete the case", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 96
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 97
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 98
 testRunner.When("User selects customer service hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 99
 testRunner.When("User clicks on activities tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 100
 testRunner.And("User clicks on task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 101
 testRunner.When(string.Format("User searches the the demand task {0}", demandTask), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 102
 testRunner.And(string.Format("User Selects the task {0} and deletes it", demandTask), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-124: Value steps for each Primary Demand type")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-3 feature")]
        [Xunit.TraitAttribute("Description", "Work-124: Value steps for each Primary Demand type")]
        [Xunit.TraitAttribute("Category", "work-124")]
        [Xunit.TraitAttribute("Category", "teamleader")]
        [Xunit.InlineDataAttribute("\'TestCase124A\'", "\'I want information\'", "\'Documents\'", "\'Send Certificate\'", "\'Authentication,Understand My Request/Assess Information Provided,Perform Change," +
            "Manage Referral,Present & Issue Quote,Arrange Payment,Confirm Policy & Issue Doc" +
            "uments\'", "\'Check For: Vulnerable Customer; Fraud Warnings; Complaints(different Text)\'", new string[0])]
        [Xunit.InlineDataAttribute("\'TestCase124B\'", "\'I want to change\'", "\'Motor change\'", "\'Add Driver\'", "\'Authentication,Understand My Request/Assess Information Provided,Perform Change," +
            "Manage Referral,Present & Issue Quote,Arrange Payment,Confirm Policy & Issue Doc" +
            "uments\'", "\'Check For: Vulnerable Customer; Fraud Warnings; Complaints\'", new string[0])]
        [Xunit.InlineDataAttribute("\'TestCase124C\'", "\'I want to cancel\'", "\'Cancellation\'", "\'Cancellation Request\'", "\'Authentication,Understand My Request/Assess Information Provided,Perform Change," +
            "Arrange Payment,Confirm Policy & Issue Documents\'", "\'Check For: Vulnerable Customer; Fraud Warnings; Complaints(different Text)\'", new string[0])]
        [Xunit.InlineDataAttribute("\'TestCase124D\'", "\'I want to renew\'", "\'Renewal\'", "\'Review Renewal\'", "\'Authentication,Understand My Request/Assess Information Provided,Perform Change," +
            "Manage referral,Present & Issue Quote,Arrange Payment,Confirm Policy & Issue Doc" +
            "uments\'", "\'Check For: Vulnerable Customer; Fraud Warnings; Complaints(different Text)\'", new string[0])]
        [Xunit.InlineDataAttribute("\'TestCase124E\'", "\'Error Management\'", "\'Cancel & Replace\'", "\'NA\'", "\'Authentication,Understand My Request/Assess Information Provided,Perform Change," +
            "Confirm Policy & Issue Documents\'", "\'Check For: Vulnerable Customer; Fraud Warnings; Complaints\'", new string[0])]
        public void Work_124ValueStepsForEachPrimaryDemandType(string caseName, string primaryDemand, string demand, string subDemand, string valueSteps, string valueStepsMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-124",
                    "teamleader"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("valueSteps", valueSteps);
            argumentsOfScenario.Add("valueStepsMessage", valueStepsMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-124: Value steps for each Primary Demand type", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 113
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 114
 testRunner.Given("User logged in to Dynamics application with \'Team Lead\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 115
 testRunner.When(string.Format("User \'Team Lead\' creates new case {0} \'I want information\' \'Documents\' \'Send Cert" +
                            "ificate\' \'sarah marta\' \'PL-HOM10003493441/00\' \'10/10/2024\' \'Motor\'", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 116
 testRunner.Then(string.Format("User changes the primaryDemand {0} demand {1} and subDemand {2}", primaryDemand, demand, subDemand), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 117
 testRunner.And(string.Format("User validates the {0} for primaryDemand {1}", valueSteps, primaryDemand), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 118
 testRunner.And(string.Format("User validates the {0} in the case page", valueStepsMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-128: Progression of Value-steps Stages")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-3 feature")]
        [Xunit.TraitAttribute("Description", "Work-128: Progression of Value-steps Stages")]
        [Xunit.TraitAttribute("Category", "work-128")]
        [Xunit.TraitAttribute("Category", "teamleader")]
        [Xunit.TraitAttribute("Category", "caseworker")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.InlineDataAttribute("\'teamlead\'", "\'TLwork128\'", "\'I want information\'", "\'Documents\'", "\'Send Certificate\'", "\'Sarah Jones\'", "\'Property\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", new string[0])]
        [Xunit.InlineDataAttribute("\'caseworker\'", "\'CWwork128\'", "\'I want to change\'", "\'Motor change\'", "\'Add Driver\'", "\'Gary Adams\'", "\'Motor\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", new string[0])]
        public void Work_128ProgressionOfValue_StepsStages(string userRole, string caseName, string primaryDemand, string demand, string subDemand, string customer, string product, string policyReference, string caseDueDate, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-128",
                    "teamleader",
                    "caseworker",
                    "admin"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseDueDate", caseDueDate);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-128: Progression of Value-steps Stages", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 130
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 131
 testRunner.Given(string.Format("User logged in to Dynamics application with {0}", userRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 132
 testRunner.When(string.Format("User {0} creates new case {1} {2} {3} {4} {5} {6} {7} {8}", userRole, caseName, primaryDemand, demand, subDemand, customer, policyReference, caseDueDate, product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 133
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 134
 testRunner.And("user validate the status of the case as \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 135
 testRunner.When("user click the \'Authentication\' in progression stages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 136
 testRunner.Then(string.Format("user validate the popup along with \'Active for\', {0} and \'Next Stage\' Button", primaryDemand), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 137
 testRunner.When("user click on the \'Next Stage\' Button in progression popup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 138
 testRunner.Then(string.Format("user validate the popup along with \'Active for\', {0}, \'Back\' and \'Next Stage\' But" +
                            "ton", primaryDemand), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 139
 testRunner.When("user click on the \'Previous Stage\' Button in progression bar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 140
 testRunner.Then(string.Format("user validate the popup along with \'Completed\', {0} and \'Set Active\' Button", primaryDemand), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 141
 testRunner.When("user click on the \'Set Active\' Button in progression popup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 142
 testRunner.Then(string.Format("user validate the popup along with \'Active for\', {0}, \'Back\' and \'Next Stage\' But" +
                            "ton", primaryDemand), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 143
 testRunner.When("user click on the \'Next Stage\' Button in progression bar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 144
 testRunner.Then(string.Format("user validate the popup along with \'Inactive\', {0}, \'\' and \'\' Button", primaryDemand), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 145
 testRunner.And(string.Format("user cancel the case {0}", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-106 From Task")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-3 feature")]
        [Xunit.TraitAttribute("Description", "Work-106 From Task")]
        [Xunit.TraitAttribute("Category", "work-106")]
        [Xunit.InlineDataAttribute("\'Caseworker\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Team Lead\'", new string[0])]
        [Xunit.InlineDataAttribute("\'System Admin\'", new string[0])]
        public void Work_106FromTask(string userRole, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-106"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-106 From Task", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 153
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 154
 testRunner.Given(string.Format("User logged in to Dynamics application with {0}", userRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 155
 testRunner.When("User clicks on activities tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 156
 testRunner.And("User clicks on task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 157
 testRunner.Then("User enter demand task details \"demand 002\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 158
 testRunner.And("User enters new task details primary demand \"I want information\" task type \"Follo" +
                        "w up\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 159
 testRunner.And("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 160
 testRunner.And("User validates the task status reason", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-106 From My Activities")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-3 feature")]
        [Xunit.TraitAttribute("Description", "Work-106 From My Activities")]
        [Xunit.TraitAttribute("Category", "work-106")]
        [Xunit.InlineDataAttribute("\'Caseworker\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Team Lead\'", new string[0])]
        [Xunit.InlineDataAttribute("\'System Admin\'", new string[0])]
        public void Work_106FromMyActivities(string userRole, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-106"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-106 From My Activities", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 169
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 170
 testRunner.Given(string.Format("User logged in to Dynamics application with {0}", userRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 171
 testRunner.When("User clicks on activities tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 172
 testRunner.And("User Filters the Task \"demand 002\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 173
 testRunner.And("User clicks on the task \'demand 002\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 174
 testRunner.Then("User enters task details primary demand \"I want to cancel\" task type \"Chaser\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 175
 testRunner.And("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 176
 testRunner.And("User validates the task status reason", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                WORKSprint_3FeatureFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                WORKSprint_3FeatureFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
