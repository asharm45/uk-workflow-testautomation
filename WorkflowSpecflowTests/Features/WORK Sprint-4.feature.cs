// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace WorkflowSpecflowTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class WORKSprint_4FeatureFeature : object, Xunit.IClassFixture<WORKSprint_4FeatureFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "WORK Sprint-4.feature"
#line hidden
        
        public WORKSprint_4FeatureFeature(WORKSprint_4FeatureFeature.FixtureData fixtureData, WorkflowSpecflowTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en"), "Features", "WORK Sprint-4 feature", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-125: Validate value steps stage for a Parent Case moves forward automaticall" +
            "y when child task mapped with upcoming value step is manually linked to an Open " +
            "case")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-4 feature")]
        [Xunit.TraitAttribute("Description", "Work-125: Validate value steps stage for a Parent Case moves forward automaticall" +
            "y when child task mapped with upcoming value step is manually linked to an Open " +
            "case")]
        [Xunit.TraitAttribute("Category", "work-125")]
        [Xunit.InlineDataAttribute("\'Admin\'", "\'TestCase3\'", "\'I want to cancel\'", "\'Cancellation\'", "\'Cancellation Request\'", "\'sarah marta\'", "\'Motor\'", "\'PL-HOM10003493441/00\'", "\'10/11/2024\'", "5", new string[0])]
        public void Work_125ValidateValueStepsStageForAParentCaseMovesForwardAutomaticallyWhenChildTaskMappedWithUpcomingValueStepIsManuallyLinkedToAnOpenCase(string userRole, string caseName, string primaryDemand, string demand, string subDemand, string customer, string product, string policyReference, string caseDueDate, string numberOfDays, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-125"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseDueDate", caseDueDate);
            argumentsOfScenario.Add("numberOfDays", numberOfDays);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-125: Validate value steps stage for a Parent Case moves forward automaticall" +
                    "y when child task mapped with upcoming value step is manually linked to an Open " +
                    "case", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given(string.Format("User logged in to Dynamics application with {0}", userRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.When(string.Format("User {0} creates new case {1} {2} {3} {4} {5} {6} {7} {8}", userRole, caseName, primaryDemand, demand, subDemand, customer, policyReference, caseDueDate, product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
 testRunner.When("User clicks on activities tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.And("User clicks on task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.And(string.Format("User selects existing case under regarding search bar {0}", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
 testRunner.Then("User validates all the fields under details section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 12
 testRunner.And("User enter demand task details \"Chaser\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.And("User validates Merlin task id field is disabled & read only", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.And("User enters task details primary demand \"I want to cancel\" task type \"chaser\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
 testRunner.And("User validates merlinTaskType \"chaser\" and valueStep \"Understand My Request/Asses" +
                        "s Information Provided\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
 testRunner.And("User enters  task description \"Creating task for testing\" and instruction field \"" +
                        "Testing purpose\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 18
 testRunner.And("User validates the task status reason", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
 testRunner.When(string.Format("User navigates to cases {0} and validates newly created task under Highlights pan" +
                            "el {1}", caseName, demand), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
 testRunner.Then("User also validates the case value step moved to \"Understand My Request/Assess In" +
                        "formation Provided\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-125: Validate value steps stage for a Parent Case Stays as-is in current val" +
            "ue step when child task mapped with bygone value step is manually linked to an O" +
            "pen case")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-4 feature")]
        [Xunit.TraitAttribute("Description", "Work-125: Validate value steps stage for a Parent Case Stays as-is in current val" +
            "ue step when child task mapped with bygone value step is manually linked to an O" +
            "pen case")]
        [Xunit.TraitAttribute("Category", "work-125")]
        [Xunit.InlineDataAttribute("\'Admin\'", "\'TestCase2\'", "\'I want to change\'", "\'Motor change\'", "\'Add Driver\'", "\'sarah marta\'", "\'Motor\'", "\'PL-HOM10003493441/00\'", "\'10/11/2024\'", "5", new string[0])]
        public void Work_125ValidateValueStepsStageForAParentCaseStaysAs_IsInCurrentValueStepWhenChildTaskMappedWithBygoneValueStepIsManuallyLinkedToAnOpenCase(string userRole, string caseName, string primaryDemand, string demand, string subDemand, string customer, string product, string policyReference, string caseDueDate, string numberOfDays, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-125"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseDueDate", caseDueDate);
            argumentsOfScenario.Add("numberOfDays", numberOfDays);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-125: Validate value steps stage for a Parent Case Stays as-is in current val" +
                    "ue step when child task mapped with bygone value step is manually linked to an O" +
                    "pen case", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 28
 testRunner.Given(string.Format("User logged in to Dynamics application with {0}", userRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 29
 testRunner.When(string.Format("User {0} creates new case {1} {2} {3} {4} {5} {6} {7} {8}", userRole, caseName, primaryDemand, demand, subDemand, customer, policyReference, caseDueDate, product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
 testRunner.And("User moves value steps to Manage Referral", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.When("User clicks on activities tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
 testRunner.And("User clicks on task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
 testRunner.And(string.Format("User selects existing case under regarding search bar {0}", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
 testRunner.Then("User validates all the fields under details section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 35
 testRunner.And("User enter demand task details \"Contents Changes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 36
 testRunner.And("User validates Merlin task id field is disabled & read only", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
 testRunner.And("User enters task details primary demand \"I want to change\" task type \"General Adm" +
                        "inistration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
 testRunner.And("User validates merlinTaskType \"General Administration\" and valueStep \"Understand " +
                        "My Request/Assess Information Provided\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.And("User enters  task description \"Creating task for testing\" and instruction field \"" +
                        "Testing purpose\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
 testRunner.And("User validates the task status reason", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.When(string.Format("User navigates to cases {0} and validates newly created task under Highlights pan" +
                            "el {1}", caseName, demand), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
 testRunner.Then("User also validates the case value step moved to \"Manage Referral\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-125: Validate value steps stage for a Parent Case moves forward automaticall" +
            "y when  two child task with different value step stages(one in future step and o" +
            "ne in Past step) is manually linked to an Open case")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-4 feature")]
        [Xunit.TraitAttribute("Description", "Work-125: Validate value steps stage for a Parent Case moves forward automaticall" +
            "y when  two child task with different value step stages(one in future step and o" +
            "ne in Past step) is manually linked to an Open case")]
        [Xunit.TraitAttribute("Category", "work-125")]
        [Xunit.InlineDataAttribute("\'Admin\'", "\'TestCase2\'", "\'I want to change\'", "\'Motor change\'", "\'Add Driver\'", "\'sarah marta\'", "\'Motor\'", "\'PL-HOM10003493441/00\'", "\'10/11/2024\'", "5", new string[0])]
        public void Work_125ValidateValueStepsStageForAParentCaseMovesForwardAutomaticallyWhenTwoChildTaskWithDifferentValueStepStagesOneInFutureStepAndOneInPastStepIsManuallyLinkedToAnOpenCase(string userRole, string caseName, string primaryDemand, string demand, string subDemand, string customer, string product, string policyReference, string caseDueDate, string numberOfDays, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-125"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseDueDate", caseDueDate);
            argumentsOfScenario.Add("numberOfDays", numberOfDays);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-125: Validate value steps stage for a Parent Case moves forward automaticall" +
                    "y when  two child task with different value step stages(one in future step and o" +
                    "ne in Past step) is manually linked to an Open case", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 51
 testRunner.Given(string.Format("User logged in to Dynamics application with {0}", userRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 52
 testRunner.When(string.Format("User {0} creates new case {1} {2} {3} {4} {5} {6} {7} {8}", userRole, caseName, primaryDemand, demand, subDemand, customer, policyReference, caseDueDate, product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 53
 testRunner.When("User clicks on activities tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 54
 testRunner.And("User clicks on task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
 testRunner.And(string.Format("User selects existing case under regarding search bar {0}", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
 testRunner.Then("User validates all the fields under details section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 57
 testRunner.And("User enter demand task details \"Motor change\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
 testRunner.And("User validates Merlin task id field is disabled & read only", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
 testRunner.And("User enters task details primary demand \"I want to change\" task type \"chaser\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
 testRunner.And("User validates merlinTaskType \"Motor Referral\" and valueStep \"Manage Referral\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
 testRunner.And("User enters  task description \"Creating task for testing\" and instruction field \"" +
                        "Testing purpose\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 63
 testRunner.And("User validates the task status reason", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
 testRunner.When(string.Format("User navigates to cases {0} and validates newly created task under Highlights pan" +
                            "el {1}", caseName, demand), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 65
 testRunner.Then("User also validates the case value step moved to \"Manage Referral\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 66
 testRunner.When("User clicks on activities tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 67
 testRunner.And("User clicks on task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 68
 testRunner.And(string.Format("User selects existing case under regarding search bar {0}", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
 testRunner.Then("User validates all the fields under details section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 70
 testRunner.And("User enter demand task details \"Motor change\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
 testRunner.And("User validates Merlin task id field is disabled & read only", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
 testRunner.And("User enters task details primary demand \"I want to change\" task type \"General End" +
                        "orsement\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
 testRunner.And("User validates merlinTaskType \"General Endorsement\" and valueStep \"Understand My " +
                        "Request/Assess Information Provided\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
 testRunner.And("User enters  task description \"Creating task for testing\" and instruction field \"" +
                        "Testing purpose\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 76
 testRunner.When(string.Format("User navigates to cases {0} and validates newly created task under Highlights pan" +
                            "el {1}", caseName, demand), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 77
 testRunner.Then("User also validates the case value step remains at \"Manage Referral\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-126: Value-steps stage - Resolve - At starting stage")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-4 feature")]
        [Xunit.TraitAttribute("Description", "Work-126: Value-steps stage - Resolve - At starting stage")]
        [Xunit.TraitAttribute("Category", "work-126")]
        [Xunit.TraitAttribute("Category", "teamlead")]
        [Xunit.TraitAttribute("Category", "caseworker")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.InlineDataAttribute("\'Team Lead\'", "\'TestCase126A\'", "\'I want information\'", "\'Documents\'", "\'Send Certificate\'", "\'sarah marta\'", "\'Motor\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "\'Request complete - first contact resolution\'", "\'Resolve Information request\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Team Lead\'", "\'TestCase126B\'", "\'I want to change\'", "\'Motor change\'", "\'Add Driver\'", "\'sarah marta\'", "\'Property\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "\'Request complete - multi contact resolution\'", "\'Resolve Motor change request\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Team Lead\'", "\'TestCase126C\'", "\'I want to cancel\'", "\'Cancellation\'", "\'Cancellation Request\'", "\'sarah marta\'", "\'Building works\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "\'Request complete - error correction\'", "\'Resolve cancel request\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Team Lead\'", "\'TestCase126D\'", "\'I want to renew\'", "\'Renewal\'", "\'Review Renewal\'", "\'sarah marta\'", "\'Motor\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "\'Request complete - not taken up\'", "\'Resolve renewal request\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Team Lead\'", "\'TestCase126E\'", "\'Error Management\'", "\'Cancel & Replace\'", "\'NA\'", "\'sarah marta\'", "\'Property\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "\'Request complete - decline cover\'", "\'Resolve error manage request\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Team Lead\'", "\'TestCase126F\'", "\'I want information\'", "\'Documents\'", "\'Send Certificate\'", "\'sarah marta\'", "\'Property\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "\'Request incomplete - Unable to contact\'", "\'Resolve incomplete request\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Team Lead\'", "\'TestCase126G\'", "\'I want to cancel\'", "\'Cancellation\'", "\'Cancellation Request\'", "\'sarah marta\'", "\'Motor\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "\'Duplicate closed \'", "\'Resolve duplicate request\'", new string[0])]
        public void Work_126Value_StepsStage_Resolve_AtStartingStage(string userRole, string caseName, string primaryDemand, string demand, string subDemand, string customer, string product, string policyReference, string caseDueDate, string resolutionType, string resolution, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-126",
                    "teamlead",
                    "caseworker",
                    "admin"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseDueDate", caseDueDate);
            argumentsOfScenario.Add("ResolutionType", resolutionType);
            argumentsOfScenario.Add("Resolution", resolution);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-126: Value-steps stage - Resolve - At starting stage", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 85
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 86
 testRunner.Given(string.Format("User logged in to Dynamics application with {0}", userRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 87
 testRunner.When(string.Format("User {0} creates new case {1} {2} {3} {4} {5} {6} {7} {8}", userRole, caseName, primaryDemand, demand, subDemand, customer, policyReference, caseDueDate, product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 88
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 89
 testRunner.And("user validate the status of the case as \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
 testRunner.When("user select the \"Resolve Case\" option from the case actions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 91
 testRunner.Then("user validates the resolve case popup is \'Enabled\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 92
 testRunner.And("user click on \'Cancel\' button in Resolve Case popup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 93
 testRunner.Then("user validates the resolve case popup is \'Disabled\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 94
 testRunner.When("user select the \"Resolve Case\" option from the case actions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 95
 testRunner.And(string.Format("user selects the option {0} and {1} in resolved popup", resolutionType, resolution), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
 testRunner.Then("user click on \'Resolve\' button in Resolve Case popup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 97
 testRunner.And("user validate the status of the case as \'Resolved\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Work-28: Validate case SLA")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-4 feature")]
        [Xunit.TraitAttribute("Description", "Work-28: Validate case SLA")]
        [Xunit.TraitAttribute("Category", "Work-28")]
        [Xunit.TraitAttribute("Category", "admin")]
        public void Work_28ValidateCaseSLA()
        {
            string[] tagsOfScenario = new string[] {
                    "Work-28",
                    "admin"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-28: Validate case SLA", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 110
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 111
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 112
 testRunner.When("User selects customer service hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldName"});
                table5.AddRow(new string[] {
                            "\'CaseName\'"});
                table5.AddRow(new string[] {
                            "\'PrimaryDemand\'"});
                table5.AddRow(new string[] {
                            "\'Customer\'"});
                table5.AddRow(new string[] {
                            "\'PolicyReference\'"});
#line 113
 testRunner.And("User validates the mandatory fields error messages", ((string)(null)), table5, "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "userRole",
                            "CaseName",
                            "PrimaryDemand",
                            "Demand",
                            "SubDemand",
                            "Customer",
                            "Product",
                            "PolicyReference",
                            "CaseDueDate",
                            "numberOfDays"});
                table6.AddRow(new string[] {
                            "\'Admin\'",
                            "\'TestCase1\'",
                            "\'I want information\'",
                            "\'Documents\'",
                            "\'Send Certificate\'",
                            "\'sarah marta\'",
                            "\'Motor\'",
                            "\'PL-HOM10003493441/00\'",
                            "\'10/10/2024\'",
                            "5"});
                table6.AddRow(new string[] {
                            "\'Admin\'",
                            "\'TestCase2\'",
                            "\'I want to change\'",
                            "\'Motor change\'",
                            "\'Add Driver\'",
                            "\'sarah marta\'",
                            "\'Motor\'",
                            "\'PL-HOM10003493441/00\'",
                            "\'10/11/2024\'",
                            "5"});
                table6.AddRow(new string[] {
                            "\'Admin\'",
                            "\'TestCase3\'",
                            "\'I want to cancel\'",
                            "\'Cancellation\'",
                            "\'Cancellation Request\'",
                            "\'sarah marta\'",
                            "\'Property\'",
                            "\'PL-HOM10003493441/00\'",
                            "\'10/11/2024\'",
                            "5"});
                table6.AddRow(new string[] {
                            "\'Admin\'",
                            "\'TestCase4\'",
                            "\'I want to renew\'",
                            "\'Renewal\'",
                            "\'Review Renewal\'",
                            "\'sarah marta\'",
                            "\'Building works\'",
                            "\'PL-HOM10003493441/00\'",
                            "\'10/11/2024\'",
                            "30"});
                table6.AddRow(new string[] {
                            "\'Admin\'",
                            "\'TestCase5\'",
                            "\'Error Management\'",
                            "\'Cancel & Replace\'",
                            "\'NA\'",
                            "\'sarah marta\'",
                            "\'Motor\'",
                            "\'PL-HOM10003493441/00\'",
                            "\'10/11/2024\'",
                            "1"});
#line 119
 testRunner.Then("User creates new case and validates case status, case due date, case number and s" +
                        "itemap", ((string)(null)), table6, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "CaseName"});
                table7.AddRow(new string[] {
                            "\'TestCase1\'"});
                table7.AddRow(new string[] {
                            "\'TestCase2\'"});
                table7.AddRow(new string[] {
                            "\'TestCase3\'"});
                table7.AddRow(new string[] {
                            "\'TestCase4\'"});
                table7.AddRow(new string[] {
                            "\'TestCase5\'"});
#line 126
 testRunner.And("User cancel the case", ((string)(null)), table7, "And ");
#line hidden
#line 133
 testRunner.And("User clicks on sign out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="1.Send an Email to UKSC mailbox & Validate the mail in D365 multi senders")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-4 feature")]
        [Xunit.TraitAttribute("Description", "1.Send an Email to UKSC mailbox & Validate the mail in D365 multi senders")]
        [Xunit.TraitAttribute("Category", "smoke1")]
        public void _1_SendAnEmailToUKSCMailboxValidateTheMailInD365MultiSenders()
        {
            string[] tagsOfScenario = new string[] {
                    "smoke1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1.Send an Email to UKSC mailbox & Validate the mail in D365 multi senders", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 139
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "sender",
                            "to",
                            "subject",
                            "body",
                            "attachment"});
                table8.AddRow(new string[] {
                            "\'Tonysmithtest\'",
                            "\'Test_UKSC_Dynamics\'",
                            "\'Agent pipelinetest test 2024\'",
                            "\'Kindly change my address\'",
                            "\'No\'"});
#line 140
 testRunner.Given("User sends an email to UKSC mailbox", ((string)(null)), table8, "Given ");
#line hidden
#line 143
 testRunner.And("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 144
 testRunner.Then("User clicks on Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 145
 testRunner.And("User searches the email by subject \'Agent pipelinetest test 2024\' and clicks on t" +
                        "he email", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 146
 testRunner.Then("User validates the email content like subject \'Agent pipelinetest test 2024\' body" +
                        " \'Kindly change my address\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 147
 testRunner.And("User clicks on sign out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-145: Send an Email to UKSC mailbox & Validate the mail in D365")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-4 feature")]
        [Xunit.TraitAttribute("Description", "Work-145: Send an Email to UKSC mailbox & Validate the mail in D365")]
        [Xunit.TraitAttribute("Category", "work-145")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.InlineDataAttribute("\'Tonysmithtest\'", "\'Test_UKSC_Dynamics\'", "\'PH-HOM123456789 Change address\'", "\'Kindly change my address\'", "\'No\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Tonysmithtest\'", "\'Test_UKSC_Dynamics\'", "\'PH-HOM123456789 Change address\'", "\'Kindly change my address, please find the attachment\'", "\'Yes\'", new string[0])]
        public void Work_145SendAnEmailToUKSCMailboxValidateTheMailInD365(string sender, string to, string subject, string body, string attachment, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-145",
                    "admin"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("sender", sender);
            argumentsOfScenario.Add("to", to);
            argumentsOfScenario.Add("subject", subject);
            argumentsOfScenario.Add("body", body);
            argumentsOfScenario.Add("attachment", attachment);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-145: Send an Email to UKSC mailbox & Validate the mail in D365", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 152
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 153
 testRunner.Given(string.Format("User sends email to UKSC mailbox with sender {0} to {1} subject {2} body {3} and " +
                            "attachment {4}", sender, to, subject, body, attachment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 154
 testRunner.And("User logged in to Dynamics application with \'Admin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 155
 testRunner.Then("User clicks on Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 156
 testRunner.And(string.Format("User searches the email by subject {0} and clicks on the email", subject), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 157
 testRunner.Then(string.Format("User validates the email content like subject {0} body {1}", subject, body), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 158
 testRunner.And("User clicks on sign out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Work-33: Send Email to dynamics with Attachment Ingestion")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-4 feature")]
        [Xunit.TraitAttribute("Description", "Work-33: Send Email to dynamics with Attachment Ingestion")]
        [Xunit.TraitAttribute("Category", "work-33")]
        [Xunit.TraitAttribute("Category", "admin")]
        public void Work_33SendEmailToDynamicsWithAttachmentIngestion()
        {
            string[] tagsOfScenario = new string[] {
                    "work-33",
                    "admin"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-33: Send Email to dynamics with Attachment Ingestion", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 166
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "sender",
                            "to",
                            "subject",
                            "body",
                            "attachment",
                            "FileName"});
                table9.AddRow(new string[] {
                            "\'Tonysmithtest\'",
                            "\'Test_UKSC_Dynamics\'",
                            "\'Agent attachment for Doc\'",
                            "\'Attachment For Doc\'",
                            "\'Yes\'",
                            "Work-33-DocxFile.docx"});
                table9.AddRow(new string[] {
                            "\'Tonysmithtest\'",
                            "\'Test_UKSC_Dynamics\'",
                            "\'Agent attachment for Json\'",
                            "\'Attachment For Json\'",
                            "\'Yes\'",
                            "Work-33-JsonFile.json"});
                table9.AddRow(new string[] {
                            "\'Tonysmithtest\'",
                            "\'Test_UKSC_Dynamics\'",
                            "\'Agent attachment for PDF\'",
                            "\'Attachment For PDF\'",
                            "\'Yes\'",
                            "Work-33-PDFFile.pdf"});
                table9.AddRow(new string[] {
                            "\'Tonysmithtest\'",
                            "\'Test_UKSC_Dynamics\'",
                            "\'Agent attachment for Screenshot\'",
                            "\'Attachment For Screenshot\'",
                            "\'Yes\'",
                            "Work-33-ScreenshotFile.MHT"});
                table9.AddRow(new string[] {
                            "\'Tonysmithtest\'",
                            "\'Test_UKSC_Dynamics\'",
                            "\'Agent attachment for Text File\'",
                            "\'Attachment For Text File\'",
                            "\'Yes\'",
                            "Work-33-TextFile.txt"});
                table9.AddRow(new string[] {
                            "\'Tonysmithtest\'",
                            "\'Test_UKSC_Dynamics\'",
                            "\'Agent attachment for Video\'",
                            "\'Attachment For Video\'",
                            "\'Yes\'",
                            "Work-33-VideoFile.mp4"});
                table9.AddRow(new string[] {
                            "\'Tonysmithtest\'",
                            "\'Test_UKSC_Dynamics\'",
                            "\'Agent attachment for XLS\'",
                            "\'Attachment For XLS File\'",
                            "\'Yes\'",
                            "Work-33-XLSFile.xls"});
                table9.AddRow(new string[] {
                            "\'Tonysmithtest\'",
                            "\'Test_UKSC_Dynamics\'",
                            "\'Agent attachment for XLSX\'",
                            "\'Attachment For XLSX File\'",
                            "\'Yes\'",
                            "Work-33-XLSXFile.xlsx"});
                table9.AddRow(new string[] {
                            "\'Tonysmithtest\'",
                            "\'Test_UKSC_Dynamics\'",
                            "\'Agent attachment for XML\'",
                            "\'Attachment For XML File\'",
                            "\'Yes\'",
                            "Work-33-XMLFile.xml"});
#line 167
 testRunner.Given("User sends an email to UKSC mailbox", ((string)(null)), table9, "Given ");
#line hidden
#line 178
 testRunner.And("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 179
 testRunner.When("User selects customer service hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 180
 testRunner.Then("User clicks on Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 181
 testRunner.And("User clicks on Emails", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "sender",
                            "to",
                            "subject",
                            "body",
                            "FileName"});
                table10.AddRow(new string[] {
                            "\'Tonysmithtest\'",
                            "\'Test_UKSC_Dynamics\'",
                            "\'Agent attachment for Doc\'",
                            "\'Attachment For Doc\'",
                            "Work-33-DocxFile.docx"});
                table10.AddRow(new string[] {
                            "\'Tonysmithtest\'",
                            "\'Test_UKSC_Dynamics\'",
                            "\'Agent attachment for Json\'",
                            "\'Attachment For Json\'",
                            "Work-33-JsonFile.json"});
                table10.AddRow(new string[] {
                            "\'Tonysmithtest\'",
                            "\'Test_UKSC_Dynamics\'",
                            "\'Agent attachment for PDF\'",
                            "\'Attachment For PDF\'",
                            "Work-33-PDFFile.pdf"});
                table10.AddRow(new string[] {
                            "\'Tonysmithtest\'",
                            "\'Test_UKSC_Dynamics\'",
                            "\'Agent attachment for Screenshot\'",
                            "\'Attachment For Screenshot\'",
                            "Work-33-ScreenshotFile.MHT"});
                table10.AddRow(new string[] {
                            "\'Tonysmithtest\'",
                            "\'Test_UKSC_Dynamics\'",
                            "\'Agent attachment for Text File\'",
                            "\'Attachment For Text File\'",
                            "Work-33-TextFile.txt"});
                table10.AddRow(new string[] {
                            "\'Tonysmithtest\'",
                            "\'Test_UKSC_Dynamics\'",
                            "\'Agent attachment for Video\'",
                            "\'Attachment For Video\'",
                            "Work-33-VideoFile.mp4"});
                table10.AddRow(new string[] {
                            "\'Tonysmithtest\'",
                            "\'Test_UKSC_Dynamics\'",
                            "\'Agent attachment for XLS\'",
                            "\'Attachment For XLS File\'",
                            "Work-33-XLSFile.xls"});
                table10.AddRow(new string[] {
                            "\'Tonysmithtest\'",
                            "\'Test_UKSC_Dynamics\'",
                            "\'Agent attachment for XLSX\'",
                            "\'Attachment For XLSX File\'",
                            "Work-33-XLSXFile.xlsx"});
                table10.AddRow(new string[] {
                            "\'Tonysmithtest\'",
                            "\'Test_UKSC_Dynamics\'",
                            "\'Agent attachment for XML\'",
                            "\'Attachment For XML File\'",
                            "Work-33-XMLFile.xml"});
#line 182
 testRunner.And("User search and validates the email content with the below", ((string)(null)), table10, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Work-208: Validate the characters in UI Fields while creating Task type  with Adm" +
            "in role")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-4 feature")]
        [Xunit.TraitAttribute("Description", "Work-208: Validate the characters in UI Fields while creating Task type  with Adm" +
            "in role")]
        [Xunit.TraitAttribute("Category", "Work-208")]
        [Xunit.TraitAttribute("Category", "admin")]
        public void Work_208ValidateTheCharactersInUIFieldsWhileCreatingTaskTypeWithAdminRole()
        {
            string[] tagsOfScenario = new string[] {
                    "Work-208",
                    "admin"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-208: Validate the characters in UI Fields while creating Task type  with Adm" +
                    "in role", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 195
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 196
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 197
 testRunner.When("User selects customer admin hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 198
 testRunner.Then("User clicks task type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 199
 testRunner.And("User clicks on New", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "PrimaryDemand",
                            "TaskType",
                            "MerlinType",
                            "AvailableForManualSelection",
                            "ValueStep"});
                table11.AddRow(new string[] {
                            "\'I want to change\'",
                            "\'Task Type Contains Two Hundreds Letters Task Type Contains Two Hundreds Letters " +
                                "Task Type Contains Two Hundreds Letters Task Type Contains Two Hundreds Letters " +
                                "Task Type Contains Two Hundreds Letters \'",
                            "\'Merlin Type Contains Two Hundred Letters Merlin Type Contains Two Hundred Letter" +
                                "s Merlin Type Contains Two Hundred Letters Merlin Type Contains Two Hundred Lett" +
                                "ers Merlin Type Contains Two Hundred Letters \'",
                            "\'No\'",
                            "\'Perform Change\'"});
#line 200
 testRunner.And("User validates Task type & merlin task type fields having 200 characters as per d" +
                        "ata catalogue", ((string)(null)), table11, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Work-208: Validate all the UI Fields while creating Task type  with Admin role")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-4 feature")]
        [Xunit.TraitAttribute("Description", "Work-208: Validate all the UI Fields while creating Task type  with Admin role")]
        [Xunit.TraitAttribute("Category", "Work-208")]
        [Xunit.TraitAttribute("Category", "admin")]
        public void Work_208ValidateAllTheUIFieldsWhileCreatingTaskTypeWithAdminRole()
        {
            string[] tagsOfScenario = new string[] {
                    "Work-208",
                    "admin"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-208: Validate all the UI Fields while creating Task type  with Admin role", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 205
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 206
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 207
 testRunner.When("User selects customer admin hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 208
 testRunner.Then("User clicks task type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 209
 testRunner.And("User clicks on New", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "PrimaryDemand",
                            "TaskType",
                            "MerlinType",
                            "AvailableForManualSelection",
                            "ValueStep"});
                table12.AddRow(new string[] {
                            "\'I want to change\'",
                            "\'Task Type Demo\'",
                            "\'Merlin Type Demo\'",
                            "\'No\'",
                            "\'Perform Change\'"});
#line 210
 testRunner.And("User validates all fields & save the task type", ((string)(null)), table12, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-277: Manual Selection for Task field type change")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-4 feature")]
        [Xunit.TraitAttribute("Description", "Work-277: Manual Selection for Task field type change")]
        [Xunit.TraitAttribute("Category", "work-277")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.InlineDataAttribute("\'I want information\'", "\'TaskType1\'", "\'MerlinTaskType1\'", "\'Yes\'", "\'Manage Referral\'", new string[0])]
        [Xunit.InlineDataAttribute("\'I want to cancel\'", "\'TaskType1\'", "\'MerlinTaskType1\'", "\'No\'", "\'Manage Referral\'", new string[0])]
        public void Work_277ManualSelectionForTaskFieldTypeChange(string primaryDemand, string taskType, string merlinTaskType, string availableForManualSelection, string valueStep, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-277",
                    "admin"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("TaskType", taskType);
            argumentsOfScenario.Add("MerlinTaskType", merlinTaskType);
            argumentsOfScenario.Add("AvailableForManualSelection", availableForManualSelection);
            argumentsOfScenario.Add("ValueStep", valueStep);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-277: Manual Selection for Task field type change", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 215
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 216
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 217
 testRunner.When("User selects customer admin hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 218
 testRunner.And("User selects task type from Sitemap menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 219
 testRunner.Then("User clicks on new button and validates all fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 220
 testRunner.And("User validates error messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 221
 testRunner.Then(string.Format("User fills all the details in the page primary demand {0} task type {1} merlin ta" +
                            "sk type {2} manual selection {3} value step {4}", primaryDemand, taskType, merlinTaskType, availableForManualSelection, valueStep), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 222
 testRunner.And("User finishes task type creation & validate all fields in view mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 223
 testRunner.And(string.Format("User deletes the task type {0}", taskType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-50: Validate Duplicate case can be Resolved with resolution type as Duplicat" +
            "e closed")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-4 feature")]
        [Xunit.TraitAttribute("Description", "Work-50: Validate Duplicate case can be Resolved with resolution type as Duplicat" +
            "e closed")]
        [Xunit.TraitAttribute("Category", "Work-50")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "caseworker")]
        [Xunit.TraitAttribute("Category", "teamlead")]
        [Xunit.InlineDataAttribute("\"Duplicate closed \"", "\"Case Resolved\"", "\"Failure\"", new string[0])]
        public void Work_50ValidateDuplicateCaseCanBeResolvedWithResolutionTypeAsDuplicateClosed(string resolutionType, string resolution, string demandType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-50",
                    "admin",
                    "caseworker",
                    "teamlead"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("ResolutionType", resolutionType);
            argumentsOfScenario.Add("Resolution", resolution);
            argumentsOfScenario.Add("demandType", demandType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-50: Validate Duplicate case can be Resolved with resolution type as Duplicat" +
                    "e closed", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 231
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 232
 testRunner.Given("User logged in to Dynamics application with \'Admin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 233
 testRunner.When("User \'Admin\' creates new case \'TestCase6\' \'I want information\' \'Documents\' \'Send " +
                        "Certificate\' \'sarah marta\' \'PL-HOM10003493441/00\' \'10/10/2024\' \'Property\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 234
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 235
 testRunner.And("User checks newly created case \"TestCase6\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 236
 testRunner.Then(string.Format("User resolve the case with Resolution Type {0} Resolution {1}", resolutionType, resolution), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 237
 testRunner.And("User validates resolved case \"TestCase6\" is read only", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 238
 testRunner.And("User validate the case status as resolved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 239
 testRunner.And(string.Format("User validates the demand type {0}", demandType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 240
 testRunner.And("User validates fields are non editable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work56 - Case Progress Save")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-4 feature")]
        [Xunit.TraitAttribute("Description", "Work56 - Case Progress Save")]
        [Xunit.TraitAttribute("Category", "work-56")]
        [Xunit.TraitAttribute("Category", "teamleader")]
        [Xunit.TraitAttribute("Category", "caseworker")]
        [Xunit.InlineDataAttribute("\'Caseworker\'", "\'CWwork56A\'", "\'I want information\'", "\'Documents\'", "\'Send Certificate\'", "\'Gary Adams\'", "\'Motor\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Caseworker\'", "\'CWwork56B\'", "\'I want to change\'", "\'Motor change\'", "\'Add Driver\'", "\'Sarah Jones\'", "\'Property\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Caseworker\'", "\'CWwork56C\'", "\'I want to cancel\'", "\'Cancellation\'", "\'Cancellation Request\'", "\'Gary Adams\'", "\'Building works\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Teamlead\'", "\'TLwork56D\'", "\'I want to renew\'", "\'Renewal\'", "\'Review Renewal\'", "\'Gary Adams\'", "\'Motor\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Teamlead\'", "\'TLwork56E\'", "\'Error Management\'", "\'Cancel & Replace\'", "\'NA\'", "\'Sarah Jones\'", "\'Property\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", new string[0])]
        public void Work56_CaseProgressSave(string userRole, string caseName, string primaryDemand, string demand, string subDemand, string customer, string product, string policyReference, string caseDueDate, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-56",
                    "teamleader",
                    "caseworker"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseDueDate", caseDueDate);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work56 - Case Progress Save", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 247
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 248
 testRunner.Given(string.Format("User logged in to Dynamics application with {0}", userRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 249
 testRunner.When(string.Format("User {0} creates new case {1} {2} {3} {4} {5} {6} {7} {8}", userRole, caseName, primaryDemand, demand, subDemand, customer, policyReference, caseDueDate, product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 250
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 251
 testRunner.And("user validate the status of the case as \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 252
 testRunner.And(string.Format("user cancel the case {0}", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                WORKSprint_4FeatureFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                WORKSprint_4FeatureFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
