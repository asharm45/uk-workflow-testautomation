// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace WorkflowSpecflowTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class WORKSprint_5FeatureFeature : object, Xunit.IClassFixture<WORKSprint_5FeatureFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "WORK Sprint-5.feature"
#line hidden
        
        public WORKSprint_5FeatureFeature(WORKSprint_5FeatureFeature.FixtureData fixtureData, WorkflowSpecflowTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en"), "Features", "WORK Sprint-5 feature", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-130: Validate Case Owner can be switched")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-5 feature")]
        [Xunit.TraitAttribute("Description", "Work-130: Validate Case Owner can be switched")]
        [Xunit.TraitAttribute("Category", "Work-130")]
        [Xunit.TraitAttribute("Category", "Caseworker")]
        [Xunit.TraitAttribute("Category", "smoke")]
        [Xunit.InlineDataAttribute("\'\'", "\'Caseworker\'", "\'TestWhatever\'", "\'I want information\'", "\'Documents\'", "\'Send Certificate\'", "\'PL-HOM10003493441/00\'", "\'sarah marta\'", "\'Amitsharma\'", new string[0])]
        public void Work_130ValidateCaseOwnerCanBeSwitched(string team, string role, string caseName, string primaryDemand, string demand, string subDemand, string policyReference, string customer, string owner, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-130",
                    "Caseworker",
                    "smoke"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("team", team);
            argumentsOfScenario.Add("role", role);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Owner", owner);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-130: Validate Case Owner can be switched", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given(string.Format("User logged in to Dynamics application with {0} and {1}", team, role), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.When(string.Format("User creates new case {0} {1} {2} {3} {4} {5}", caseName, primaryDemand, demand, subDemand, customer, policyReference), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 9
 testRunner.Then(string.Format("User Changes the {0}", owner), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 10
 testRunner.And(string.Format("Validates Owner is Changed {0}", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-130: Validate Task Owners can be switched")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-5 feature")]
        [Xunit.TraitAttribute("Description", "Work-130: Validate Task Owners can be switched")]
        [Xunit.TraitAttribute("Category", "Work-130")]
        [Xunit.TraitAttribute("Category", "Caseworker")]
        [Xunit.TraitAttribute("Category", "smoke")]
        [Xunit.InlineDataAttribute("\'\'", "\'Caseworker\'", "\'TestCase\'", "\'Amitsharma\'", new string[0])]
        public void Work_130ValidateTaskOwnersCanBeSwitched(string team, string role, string demandTask, string owner, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-130",
                    "Caseworker",
                    "smoke"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("team", team);
            argumentsOfScenario.Add("role", role);
            argumentsOfScenario.Add("DemandTask", demandTask);
            argumentsOfScenario.Add("Owner", owner);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-130: Validate Task Owners can be switched", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 18
 testRunner.Given(string.Format("User logged in to Dynamics application with {0} and {1}", team, role), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 19
 testRunner.When("User clicks on activities tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
 testRunner.And("User clicks on task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
 testRunner.And(string.Format("User Enters {0}", demandTask), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.Then(string.Format("User Changes the {0}", owner), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 23
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Work-141: Validate case SLA")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-5 feature")]
        [Xunit.TraitAttribute("Description", "Work-141: Validate case SLA")]
        [Xunit.TraitAttribute("Category", "work-141")]
        [Xunit.TraitAttribute("Category", "regression")]
        [Xunit.TraitAttribute("Category", "work-143")]
        [Xunit.TraitAttribute("Category", "admin")]
        public void Work_141ValidateCaseSLA()
        {
            string[] tagsOfScenario = new string[] {
                    "work-141",
                    "regression",
                    "work-143",
                    "admin"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-141: Validate case SLA", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 34
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldName"});
                table13.AddRow(new string[] {
                            "\'CaseName\'"});
                table13.AddRow(new string[] {
                            "\'PrimaryDemand\'"});
                table13.AddRow(new string[] {
                            "\'Customer\'"});
                table13.AddRow(new string[] {
                            "\'PolicyReference\'"});
#line 36
 testRunner.When("User validates the mandatory fields error messages", ((string)(null)), table13, "When ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "userRole",
                            "CaseName",
                            "PrimaryDemand",
                            "Demand",
                            "SubDemand",
                            "Customer",
                            "Product",
                            "PolicyReference",
                            "CaseDueDate",
                            "numberOfDays"});
                table14.AddRow(new string[] {
                            "\'Admin\'",
                            "\'TestCase1\'",
                            "\'I want information\'",
                            "\'Documents\'",
                            "\'Send Certificate\'",
                            "\'sarah marta\'",
                            "\'Motor\'",
                            "\'PL-HOM10003493441/00\'",
                            "\'10/10/2024\'",
                            "5"});
                table14.AddRow(new string[] {
                            "\'Admin\'",
                            "\'TestCase2\'",
                            "\'I want to change\'",
                            "\'Motor change\'",
                            "\'Add Driver\'",
                            "\'sarah marta\'",
                            "\'Motor\'",
                            "\'PL-HOM10003493441/00\'",
                            "\'10/11/2024\'",
                            "5"});
                table14.AddRow(new string[] {
                            "\'Admin\'",
                            "\'TestCase3\'",
                            "\'I want to cancel\'",
                            "\'Cancellation\'",
                            "\'Cancellation Request\'",
                            "\'sarah marta\'",
                            "\'Property\'",
                            "\'PL-HOM10003493441/00\'",
                            "\'10/11/2024\'",
                            "5"});
                table14.AddRow(new string[] {
                            "\'Admin\'",
                            "\'TestCase4\'",
                            "\'I want to renew\'",
                            "\'Renewal\'",
                            "\'Review Renewal\'",
                            "\'sarah marta\'",
                            "\'Building works\'",
                            "\'PL-HOM10003493441/00\'",
                            "\'10/11/2024\'",
                            "30"});
                table14.AddRow(new string[] {
                            "\'Admin\'",
                            "\'TestCase5\'",
                            "\'Error Management\'",
                            "\'Cancel & Replace\'",
                            "\'NA\'",
                            "\'sarah marta\'",
                            "\'Motor\'",
                            "\'PL-HOM10003493441/00\'",
                            "\'10/11/2024\'",
                            "1"});
#line 42
 testRunner.Then("User creates new case and validates case status, case due date, case number and s" +
                        "itemap", ((string)(null)), table14, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "CaseName"});
                table15.AddRow(new string[] {
                            "\'TestCase1\'"});
                table15.AddRow(new string[] {
                            "\'TestCase2\'"});
                table15.AddRow(new string[] {
                            "\'TestCase3\'"});
                table15.AddRow(new string[] {
                            "\'TestCase4\'"});
                table15.AddRow(new string[] {
                            "\'TestCase5\'"});
#line 49
 testRunner.And("User cancel the case", ((string)(null)), table15, "And ");
#line hidden
#line 56
 testRunner.And("User clicks on sign out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Work-141: Validate case SLA - update SLA time")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-5 feature")]
        [Xunit.TraitAttribute("Description", "Work-141: Validate case SLA - update SLA time")]
        [Xunit.TraitAttribute("Category", "work-141")]
        public void Work_141ValidateCaseSLA_UpdateSLATime()
        {
            string[] tagsOfScenario = new string[] {
                    "work-141"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-141: Validate case SLA - update SLA time", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 59
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 60
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 61
 testRunner.When("User selects customer admin hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 62
 testRunner.Then("User clicsUser clicks on SLA timer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "SLA",
                            "PrimaryDemand"});
                table16.AddRow(new string[] {
                            "7",
                            "\'I want information\'"});
                table16.AddRow(new string[] {
                            "7",
                            "\'I want to change\'"});
                table16.AddRow(new string[] {
                            "7",
                            "\'I want to cancel\'"});
                table16.AddRow(new string[] {
                            "35",
                            "\'I want to renew\'\'"});
                table16.AddRow(new string[] {
                            "2",
                            "\'Error Management\'"});
#line 63
 testRunner.Then("User updates the sla for primaryDemand:", ((string)(null)), table16, "Then ");
#line hidden
#line 70
 testRunner.When("User navigates to Customer Service Hub", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "userRole",
                            "CaseName",
                            "PrimaryDemand",
                            "Demand",
                            "SubDemand",
                            "Customer",
                            "Product",
                            "PolicyReference",
                            "CaseDueDate",
                            "numberOfDays"});
                table17.AddRow(new string[] {
                            "\'Admin\'",
                            "\'TestCase1\'",
                            "\'I want information\'",
                            "\'Documents\'",
                            "\'Send Certificate\'",
                            "\'sarah marta\'",
                            "\'Motor\'",
                            "\'PL-HOM10003493441/00\'",
                            "\'10/10/2024\'",
                            "7"});
                table17.AddRow(new string[] {
                            "\'Admin\'",
                            "\'TestCase2\'",
                            "\'I want to change\'",
                            "\'Motor change\'",
                            "\'Add Driver\'",
                            "\'sarah marta\'",
                            "\'Property\'",
                            "\'PL-HOM10003493441/00\'",
                            "\'10/11/2024\'",
                            "7"});
                table17.AddRow(new string[] {
                            "\'Admin\'",
                            "\'TestCase3\'",
                            "\'I want to cancel\'",
                            "\'Cancellation\'",
                            "\'Cancellation Request\'",
                            "\'sarah marta\'",
                            "\'Property\'",
                            "\'PL-HOM10003493441/00\'",
                            "\'10/11/2024\'",
                            "7"});
                table17.AddRow(new string[] {
                            "\'Admin\'",
                            "\'TestCase4\'",
                            "\'I want to renew\'",
                            "\'Renewal\'",
                            "\'Review Renewal\'",
                            "\'sarah marta\'",
                            "\'Building works\'",
                            "\'PL-HOM10003493441/00\'",
                            "\'10/11/2024\'",
                            "35"});
                table17.AddRow(new string[] {
                            "\'Admin\'",
                            "\'TestCase5\'",
                            "\'Error Management\'",
                            "\'Cancel & Replace\'",
                            "\'NA\'",
                            "\'sarah marta\'",
                            "\'Motor\'",
                            "\'PL-HOM10003493441/00\'",
                            "\'10/11/2024\'",
                            "2"});
#line 71
 testRunner.And("User creates the case and validates the sla:", ((string)(null)), table17, "And ");
#line hidden
#line 78
 testRunner.When("user navigates to Customer Service admin center", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "SLA",
                            "PrimaryDemand"});
                table18.AddRow(new string[] {
                            "5",
                            "\'I want information\'"});
                table18.AddRow(new string[] {
                            "5",
                            "\'I want to change\'"});
                table18.AddRow(new string[] {
                            "5",
                            "\'I want to cancel\'"});
                table18.AddRow(new string[] {
                            "30",
                            "\'I want to renew\'\'"});
                table18.AddRow(new string[] {
                            "1",
                            "\'Error Management\'"});
#line 79
 testRunner.Then("User updates original sla for primaryDemand:", ((string)(null)), table18, "Then ");
#line hidden
#line 86
 testRunner.And("User clicks on sign out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Validate case SLA - Validate the Case SLA is updated if Primary demand is updated" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-5 feature")]
        [Xunit.TraitAttribute("Description", "Validate case SLA - Validate the Case SLA is updated if Primary demand is updated" +
            "")]
        [Xunit.InlineDataAttribute("\'Admin\'", "\'I want to change\'", "\'Motor change\'", "\'Add Driver\'", "\'Authentication,Understand My Request/Assess Information Provided,Perform Change," +
            "Manage Referral,Present & Issue Quote,Arrange Payment,Confirm Policy & Issue Doc" +
            "uments\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Admin\'", "\'I want to cancel\'", "\'Cancellation\'", "\'Cancellation Request\'", "\'Authentication,Understand My Request/Assess Information Provided,Perform Change," +
            "Arrange Payment,Confirm Policy & Issue Documents\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Admin\'", "\'I want to renew\'", "\'Renewal\'", "\'Review Renewal\'", "\'Authentication,Understand My Request/Assess Information Provided,Perform Change," +
            "Manage referral,Present & Issue Quote,Arrange Payment,Confirm Policy & Issue Doc" +
            "uments\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Admin\'", "\'Error Management\'", "\'Cancel & Replace\'", "\'NA\'", "\'Authentication,Understand My Request/Assess Information Provided,Perform Change," +
            "Confirm Policy & Issue Documents\'", new string[0])]
        public void ValidateCaseSLA_ValidateTheCaseSLAIsUpdatedIfPrimaryDemandIsUpdated(string userRole, string primaryDemand, string demand, string subDemand, string valueSteps, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("valueSteps", valueSteps);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate case SLA - Validate the Case SLA is updated if Primary demand is updated" +
                    "", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 88
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 89
 testRunner.Given(string.Format("User logged in to Dynamics application with {0}", userRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 90
 testRunner.When("User \'Admin\' creates new case \'TestCase6\' \'I want information\' \'Documents\' \'Send " +
                        "Certificate\' \'sarah marta\' \'PL-HOM10003493441/00\' \'10/10/2024\' \'Motor\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 91
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 92
 testRunner.And("User validates the valueSteps \"Authentication,Understand My Request/Assess Inform" +
                        "ation Provided,Perform Change,Confirm Policy & Issue Documents\" for primaryDeman" +
                        "d \"I want information\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 93
 testRunner.Then("User selects newly created case \'TestCase6\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 94
 testRunner.Then(string.Format("User changes the primaryDemand {0} demand {1} and subDemand {2}", primaryDemand, demand, subDemand), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 95
 testRunner.And(string.Format("User validates the {0} for primaryDemand {1}", valueSteps, primaryDemand), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
 testRunner.Then("User validate the status of the case", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 97
 testRunner.And(string.Format("User validates the case due date <numberOfDays> for primary demand {0}", primaryDemand), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 98
 testRunner.And("User validate the updated SLA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 99
 testRunner.And("User cancel the case \"TestCase6\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-77: Correspondence - Case Management")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-5 feature")]
        [Xunit.TraitAttribute("Description", "Work-77: Correspondence - Case Management")]
        [Xunit.TraitAttribute("Category", "work-77")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.InlineDataAttribute("\'Tonysmithtest\'", "\'Test_UKSC_Dynamics\'", "\'(EXT) RE: Mr Guinevere Forbes - PL-HOM05006213708/06\'", "\'Apologies, Lionel. Client has also confirmed that the tracker subscription has b" +
            "een renewed for a further 3 years\'", "\'No\'", "\'(EXT) RE: Mr Guinevere Forbes - PL-HOM05006213708/06\'", new string[0])]
        public void Work_77Correspondence_CaseManagement(string sender, string to, string subject, string body, string attachment, string caseName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-77",
                    "admin"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("sender", sender);
            argumentsOfScenario.Add("to", to);
            argumentsOfScenario.Add("subject", subject);
            argumentsOfScenario.Add("body", body);
            argumentsOfScenario.Add("attachment", attachment);
            argumentsOfScenario.Add("CaseName", caseName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-77: Correspondence - Case Management", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 110
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 111
 testRunner.Given(string.Format("User sends email to UKSC mailbox with sender {0} to {1} subject {2} body {3} and " +
                            "attachment {4}", sender, to, subject, body, attachment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 112
 testRunner.And("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 113
 testRunner.When("User selects customer service hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 114
 testRunner.Then("User clicks on Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 115
 testRunner.And(string.Format("User searches the email by subject {0} and clicks on the email", subject), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 116
 testRunner.Then(string.Format("User validates the email content like subject {0} body {1}", subject, body), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 117
 testRunner.Then(string.Format("User validates if regarding field is updated with case name {0} and click on the " +
                            "case link", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 118
 testRunner.And(string.Format("User validates if email appears in the timeline subject {0} body {1}", subject, body), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-46: Validate the user can able to search attributes in whole search/search r" +
            "esults bar which makes user to find out information easily.")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-5 feature")]
        [Xunit.TraitAttribute("Description", "Work-46: Validate the user can able to search attributes in whole search/search r" +
            "esults bar which makes user to find out information easily.")]
        [Xunit.TraitAttribute("Category", "work-46")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.InlineDataAttribute("\'1000\'", "\'09992105411\'", "\'amitsharma.jaiprakash@hiscox.com\'", "\'Workflow Contact\'", "\'PL-HOM10003493441/00\'", "\'Walter Disney\'", "\'CAS-01429-Y2F6P7\'", "\'Resolved\'", "\'Open\'", "\'Active\'", "\'I want information\'", new string[0])]
        public void Work_46ValidateTheUserCanAbleToSearchAttributesInWholeSearchSearchResultsBarWhichMakesUserToFindOutInformationEasily_(string postCode, string phoneNumber, string emailAddress, string contactName, string policyRef, string brokerName, string caseNumber, string resolvedStatus, string openStatus, string activeStatus, string primaryDemand, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-46",
                    "admin"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("postCode", postCode);
            argumentsOfScenario.Add("phoneNumber", phoneNumber);
            argumentsOfScenario.Add("emailAddress", emailAddress);
            argumentsOfScenario.Add("contactName", contactName);
            argumentsOfScenario.Add("policyRef", policyRef);
            argumentsOfScenario.Add("brokerName", brokerName);
            argumentsOfScenario.Add("caseNumber", caseNumber);
            argumentsOfScenario.Add("resolvedStatus", resolvedStatus);
            argumentsOfScenario.Add("openStatus", openStatus);
            argumentsOfScenario.Add("activeStatus", activeStatus);
            argumentsOfScenario.Add("primaryDemand", primaryDemand);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-46: Validate the user can able to search attributes in whole search/search r" +
                    "esults bar which makes user to find out information easily.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 126
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 127
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 128
 testRunner.When("User selects customer service hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 129
 testRunner.Then(string.Format("User searches by postCode {0} and validates the results", postCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 130
 testRunner.Then(string.Format("User searches by phoneNumber {0} and validates the results", phoneNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 131
 testRunner.Then(string.Format("User searches by emailAddress {0} and validates the results", emailAddress), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 132
 testRunner.Then(string.Format("User searches by contactName {0} and validates the results", contactName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 133
 testRunner.Then(string.Format("User searches by policyRef {0} and validates the results", policyRef), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 134
 testRunner.Then(string.Format("User searches by brokerName {0} and validates the results", brokerName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 136
 testRunner.Then(string.Format("User searches by resolvedStatus {0} and validates the results", resolvedStatus), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 137
 testRunner.Then(string.Format("User searches by openStatus {0} and validates the results", openStatus), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 138
 testRunner.Then(string.Format("User searches by activeStatus {0} and validates the results", activeStatus), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 139
 testRunner.Then(string.Format("User searches by primaryDemand {0} and validates the results", primaryDemand), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-47: Team Leader - Bulk Case Management")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-5 feature")]
        [Xunit.TraitAttribute("Description", "Work-47: Team Leader - Bulk Case Management")]
        [Xunit.TraitAttribute("Category", "Work-47")]
        [Xunit.TraitAttribute("Category", "teamlead")]
        [Xunit.TraitAttribute("Category", "paralleltest")]
        [Xunit.InlineDataAttribute("\'Team Lead\'", "\'WF47Bulkcases1\'", "\'WF47Bulkcases2\'", "\'WF47Bulkcases3\'", "\'I want information\'", "\'Documents\'", "\'Send Certificate\'", "\'sarah marta\'", "\'Motor\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "\'Sanjay Jayakumar\'", new string[0])]
        public void Work_47TeamLeader_BulkCaseManagement(string userRole, string caseName1, string caseName2, string caseName3, string primaryDemand, string demand, string subDemand, string customer, string product, string policyReference, string caseDueDate, string userOrTeam, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-47",
                    "teamlead",
                    "paralleltest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("CaseName1", caseName1);
            argumentsOfScenario.Add("CaseName2", caseName2);
            argumentsOfScenario.Add("CaseName3", caseName3);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseDueDate", caseDueDate);
            argumentsOfScenario.Add("UserOrTeam", userOrTeam);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-47: Team Leader - Bulk Case Management", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 146
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 147
 testRunner.Given("User logged in to Dynamics application with \'Team Lead\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 148
 testRunner.When(string.Format("User {0} creates new case {1} {2} {3} {4} {5} {6} {7} {8}", userRole, caseName1, primaryDemand, demand, subDemand, customer, policyReference, caseDueDate, product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 149
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 150
 testRunner.When(string.Format("User \'caseWorker\' creates new case {0} {1} {2} {3} {4} {5} {6} {7}", caseName2, primaryDemand, demand, subDemand, customer, policyReference, caseDueDate, product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 151
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 152
 testRunner.When(string.Format("User \'caseworker\' creates new case {0} {1} {2} {3} {4} {5} {6} {7}", caseName3, primaryDemand, demand, subDemand, customer, policyReference, caseDueDate, product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 153
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 154
 testRunner.When(string.Format("User select the cases {0} {1} {2}", caseName1, caseName2, caseName3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 155
 testRunner.Then(string.Format("User Assigns the Task and selects {0}", userOrTeam), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 156
 testRunner.And(string.Format("User validates the cases {0} {1} {2} ownername is changed to {3}", caseName1, caseName2, caseName3, userOrTeam), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 157
 testRunner.And(string.Format("user cancel the case {0}{1}{2}", caseName1, caseName2, caseName3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-245: Mark a demand as Failure from case creation")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-5 feature")]
        [Xunit.TraitAttribute("Description", "Work-245: Mark a demand as Failure from case creation")]
        [Xunit.TraitAttribute("Category", "Work-245")]
        [Xunit.InlineDataAttribute("\"Request complete - first contact resolution\"", "\"Case Resolved\"", "\"Value\"", new string[0])]
        [Xunit.InlineDataAttribute("\"Request complete - multi contact resolution\"", "\"Case Resolved\"", "\"Value\"", new string[0])]
        [Xunit.InlineDataAttribute("\"Request complete - error correction\"", "\"Case Resolved\"", "\"Failure\"", new string[0])]
        [Xunit.InlineDataAttribute("\"Request complete - not taken up\"", "\"Case Resolved\"", "\"Value\"", new string[0])]
        [Xunit.InlineDataAttribute("\"Request complete - decline cover\"", "\"Case Resolved\"", "\"Value\"", new string[0])]
        [Xunit.InlineDataAttribute("\"Request incomplete - unable to contact\"", "\"Case Resolved\"", "\"Value\"", new string[0])]
        [Xunit.InlineDataAttribute("\"Duplicate closed \"", "\"Case Resolved\"", "\"Failure\"", new string[0])]
        public void Work_245MarkADemandAsFailureFromCaseCreation(string resolutionType, string resolution, string demandType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-245"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("ResolutionType", resolutionType);
            argumentsOfScenario.Add("Resolution", resolution);
            argumentsOfScenario.Add("demandType", demandType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-245: Mark a demand as Failure from case creation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 166
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 167
 testRunner.Given("User logged in to Dynamics application with \'Admin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 168
 testRunner.When("User \'Admin\' creates new case \'TestCase6\' \'I want information\' \'Documents\' \'Send " +
                        "Certificate\' \'sarah marta\' \'PL-HOM10003493441/00\' \'10/10/2024\' \'Motor\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 169
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 170
 testRunner.And("User checks newly created case \"TestCase6\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 171
 testRunner.Then(string.Format("User resolve the case with Resolution Type {0} Resolution {1}", resolutionType, resolution), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 172
 testRunner.And("User validates resolved case \"TestCase6\" is read only", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 173
 testRunner.And(string.Format("User validates the demand type {0}", demandType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                WORKSprint_5FeatureFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                WORKSprint_5FeatureFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
