// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace WorkflowSpecflowTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class WORKSprint_8FeatureFeature : object, Xunit.IClassFixture<WORKSprint_8FeatureFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "WORK Sprint-8.feature"
#line hidden
        
        public WORKSprint_8FeatureFeature(WORKSprint_8FeatureFeature.FixtureData fixtureData, WorkflowSpecflowTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en"), "Features", "WORK Sprint-8 feature", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-163 Work-505: Validate admin can add new Underwriter Authority")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-8 feature")]
        [Xunit.TraitAttribute("Description", "Work-163 Work-505: Validate admin can add new Underwriter Authority")]
        [Xunit.TraitAttribute("Category", "Work-505")]
        [Xunit.TraitAttribute("Category", "Work-163")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "teamlead")]
        [Xunit.InlineDataAttribute("\'Amitsharma Jaiprakash\'", "\'2500000.00\'", "\'3500000.00\'", "\'4500000.00\'", new string[0])]
        public void Work_163Work_505ValidateAdminCanAddNewUnderwriterAuthority(string agent, string property, string vehicle, string accumulation, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-505",
                    "Work-163",
                    "admin",
                    "teamlead"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Agent", agent);
            argumentsOfScenario.Add("Property", property);
            argumentsOfScenario.Add("Vehicle", vehicle);
            argumentsOfScenario.Add("Accumulation", accumulation);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-163 Work-505: Validate admin can add new Underwriter Authority", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.When("User selects customer admin hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.And("User Clicks On Underwriter Authority", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.Then("User clicks on new button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
 testRunner.And("User validates all the fields visible \'Agent\' \'Property only\' \'Motor only single " +
                        "vehicle\' and \'Motor total accumulation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.Then("User validates error messages on UA screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 13
 testRunner.And(string.Format("User creates New UA {0} {1} {2} {3}", agent, property, vehicle, accumulation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.And("User clicks on save and close button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
 testRunner.And(string.Format("User validate UA is saved and created successfully with {0} {1} {2} {3}", agent, property, vehicle, accumulation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
 testRunner.And(string.Format("User deletes the UA {0}", agent), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-163 Work-505: Validate admin can update existing Underwriter Authority")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-8 feature")]
        [Xunit.TraitAttribute("Description", "Work-163 Work-505: Validate admin can update existing Underwriter Authority")]
        [Xunit.TraitAttribute("Category", "Work-505")]
        [Xunit.TraitAttribute("Category", "Work-163")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "teamlead")]
        [Xunit.InlineDataAttribute("\'Amitsharma Jaiprakash\'", "\'2500000.00\'", "\'3500000.00\'", "\'4500000.00\'", "\'2600000.00\'", "\'3600000.00\'", "\'4600000.00\'", new string[0])]
        public void Work_163Work_505ValidateAdminCanUpdateExistingUnderwriterAuthority(string agent, string property, string vehicle, string accumulation, string newProperty, string newVehicle, string newAccumulation, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-505",
                    "Work-163",
                    "admin",
                    "teamlead"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Agent", agent);
            argumentsOfScenario.Add("Property", property);
            argumentsOfScenario.Add("Vehicle", vehicle);
            argumentsOfScenario.Add("Accumulation", accumulation);
            argumentsOfScenario.Add("NewProperty", newProperty);
            argumentsOfScenario.Add("NewVehicle", newVehicle);
            argumentsOfScenario.Add("NewAccumulation", newAccumulation);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-163 Work-505: Validate admin can update existing Underwriter Authority", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 24
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 25
 testRunner.When("User selects customer admin hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 26
 testRunner.And("User Clicks On Underwriter Authority", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.Then("User clicks on new button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
 testRunner.And("User validates all the fields visible \'Agent\' \'Property only\' \'Motor only single " +
                        "vehicle\' and \'Motor total accumulation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.And(string.Format("User creates New UA {0} {1} {2} {3}", agent, property, vehicle, accumulation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.And("User clicks on save and close button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.And(string.Format("User selects the newly created UA with {0} and updated the {1} {2} {3}", agent, newProperty, newVehicle, newAccumulation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.Then(string.Format("User validates if UA is updated successfully with {0} {1} {2} {3}", agent, newProperty, newVehicle, newAccumulation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 33
 testRunner.And(string.Format("User deletes the UA {0}", agent), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-163 Work-505: Validate admin can update existing Underwriter Authority with " +
            "Agent")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-8 feature")]
        [Xunit.TraitAttribute("Description", "Work-163 Work-505: Validate admin can update existing Underwriter Authority with " +
            "Agent")]
        [Xunit.TraitAttribute("Category", "Work-505")]
        [Xunit.TraitAttribute("Category", "Work-163")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "teamlead")]
        [Xunit.InlineDataAttribute("\'Amitsharma Jaiprakash\'", "\'2500000.00\'", "\'3500000.00\'", "\'4500000.00\'", "\'Aravind Dakarapu\'", "\'2600000.00\'", "\'3600000.00\'", "\'4600000.00\'", new string[0])]
        public void Work_163Work_505ValidateAdminCanUpdateExistingUnderwriterAuthorityWithAgent(string agent, string property, string vehicle, string accumulation, string newAgent, string newProperty, string newVehicle, string newAccumulation, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-505",
                    "Work-163",
                    "admin",
                    "teamlead"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Agent", agent);
            argumentsOfScenario.Add("Property", property);
            argumentsOfScenario.Add("Vehicle", vehicle);
            argumentsOfScenario.Add("Accumulation", accumulation);
            argumentsOfScenario.Add("NewAgent", newAgent);
            argumentsOfScenario.Add("NewProperty", newProperty);
            argumentsOfScenario.Add("NewVehicle", newVehicle);
            argumentsOfScenario.Add("NewAccumulation", newAccumulation);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-163 Work-505: Validate admin can update existing Underwriter Authority with " +
                    "Agent", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 41
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 42
 testRunner.When("User selects customer admin hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
 testRunner.And("User Clicks On Underwriter Authority", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
 testRunner.Then("User clicks on new button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 45
 testRunner.And("User validates all the fields visible \'Agent\' \'Property only\' \'Motor only single " +
                        "vehicle\' and \'Motor total accumulation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
 testRunner.And(string.Format("User creates New UA {0} {1} {2} {3}", agent, property, vehicle, accumulation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
 testRunner.And("User clicks on save and close button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
 testRunner.And(string.Format("User selects the newly created UA with {0} and updated the {1} {2} {3} {4}", agent, newAgent, newProperty, newVehicle, newAccumulation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
 testRunner.Then(string.Format("User validates if UA is updated successfully with {0} {1} {2} {3}", newAgent, newProperty, newVehicle, newAccumulation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 50
 testRunner.And(string.Format("User deletes the UA {0}", newAgent), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-163 Work-505: Validate admin can delete existing Underwriter Authority")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-8 feature")]
        [Xunit.TraitAttribute("Description", "Work-163 Work-505: Validate admin can delete existing Underwriter Authority")]
        [Xunit.TraitAttribute("Category", "Work-505")]
        [Xunit.TraitAttribute("Category", "Work-163")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "teamlead")]
        [Xunit.TraitAttribute("Category", "paralleltest")]
        [Xunit.InlineDataAttribute("\'Amitsharma Jaiprakash\'", "\'2500000.00\'", "\'3500000.00\'", "\'4500000.00\'", new string[0])]
        public void Work_163Work_505ValidateAdminCanDeleteExistingUnderwriterAuthority(string agent, string property, string vehicle, string accumulation, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-505",
                    "Work-163",
                    "admin",
                    "teamlead",
                    "paralleltest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Agent", agent);
            argumentsOfScenario.Add("Property", property);
            argumentsOfScenario.Add("Vehicle", vehicle);
            argumentsOfScenario.Add("Accumulation", accumulation);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-163 Work-505: Validate admin can delete existing Underwriter Authority", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 57
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 58
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 59
 testRunner.When("User selects customer admin hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 60
 testRunner.And("User Clicks On Underwriter Authority", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
 testRunner.Then("User clicks on new button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 62
 testRunner.And("User validates all the fields visible \'Agent\' \'Property only\' \'Motor only single " +
                        "vehicle\' and \'Motor total accumulation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
 testRunner.And(string.Format("User creates New UA {0} {1} {2} {3}", agent, property, vehicle, accumulation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
 testRunner.And("User clicks on save and close button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
 testRunner.And(string.Format("User deletes the UA {0}", agent), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-140")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-8 feature")]
        [Xunit.TraitAttribute("Description", "Work-140")]
        [Xunit.TraitAttribute("Category", "Work-140")]
        [Xunit.TraitAttribute("Category", "smoke")]
        [Xunit.InlineDataAttribute("\'Caseworker\'", "\'TaskDueDate1\'", "\'I want information\'", "\'Documents\'", "\'Send Certificate\'", "\'sarah marta\'", "\'Property\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "5", new string[0])]
        [Xunit.InlineDataAttribute("\'Caseworker\'", "\'TaskDueDate2\'", "\'I want to change\'", "\'Motor change\'", "\'Add Driver\'", "\'sarah marta\'", "\'Property\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "5", new string[0])]
        [Xunit.InlineDataAttribute("\'Caseworker\'", "\'TaskDueDate3\'", "\'I want to cancel\'", "\'Cancellation\'", "\'Cancellation Request\'", "\'sarah marta\'", "\'Property\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "5", new string[0])]
        [Xunit.InlineDataAttribute("\'Caseworker\'", "\'TaskDueDate4\'", "\'I want to renew\'", "\'Renewal\'", "\'Renewal\'", "\'sarah marta\'", "\'Property\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "30", new string[0])]
        [Xunit.InlineDataAttribute("\'Caseworker\'", "\'TaskDueDate5\'", "\'Error Management\'", "\'Cancel & Replace\'", "\'NA\'", "\'sarah marta\'", "\'Property\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "1", new string[0])]
        public void Work_140(string userRole, string caseName, string primaryDemand, string demand, string subDemand, string customer, string product, string policyReference, string caseDueDate, string numberOfDays, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-140",
                    "smoke"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseDueDate", caseDueDate);
            argumentsOfScenario.Add("numberOfDays", numberOfDays);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-140", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 74
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 75
 testRunner.Given(string.Format("User logged in to Dynamics application with {0}", userRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 76
 testRunner.When(string.Format("User {0} creates new case {1} {2} {3} {4} {5} {6} {7} {8}", userRole, caseName, primaryDemand, demand, subDemand, customer, policyReference, caseDueDate, product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 77
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 78
 testRunner.When("User clicks on activities tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 79
 testRunner.And("User clicks on task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
 testRunner.And(string.Format("User creates task with regarding {0} demand task \"task demand\" and validates case" +
                            " due date {1} and primary demand {2}", caseName, numberOfDays, primaryDemand), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 81
 testRunner.Then(string.Format("User cancels the case with tasks {0}", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-502: Pick exclusion Criteria")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-8 feature")]
        [Xunit.TraitAttribute("Description", "Work-502: Pick exclusion Criteria")]
        [Xunit.TraitAttribute("Category", "work-502")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.InlineDataAttribute("\'(EXT) FW: Hiscox Insurance - policy number PL-HOM05006213708/06\'", "\'Hi, Please note the above has renewed from 31sy July.\'", "\'No\'", "\'(EXT) FW: Hiscox Insurance - policy number PL-HOM05006213708/06\'", "\'I want information\'", "\'Documents\'", "\'PL-HOM10003493441/00\'", "5", "\'Documentation\'", "\'No\'", new string[0])]
        [Xunit.InlineDataAttribute("\'FW: (EXT) RE: Hiscox Insurance for Mr Guinevere Forbes PL-HOM05006213708/06\'", "\'Hi, Please cancel this off from inception.\'", "\'No\'", "\'FW: (EXT) RE: Hiscox Insurance for Mr Guinevere Forbes PL-HOM05006213708/06\'", "\'I want to cancel\'", "\'Cancellation\'", "\'PL-HOM10003493441/00\'", "5", "\'Cancellation - Lapse\'", "\'Yes\'", new string[0])]
        [Xunit.InlineDataAttribute("\'(EXT) RE: Hiscox Insurance for Mr Guinevere Forbes- quote number PL-HOM050062137" +
            "08/06\'", "\'Hi Louise, The above client has decided to go elsewhere for their insurance. Can" +
            " you please lapse?\'", "\'No\'", "\'(EXT) RE: Hiscox Insurance for Mr Guinevere Forbes- quote number PL-HOM050062137" +
            "08/06\'", "\'I want to cancel\'", "\'Cancellation\'", "\'PL-HOM10003493441/00\'", "5", "\'Cancellation - Broker lost client\'", "\'Yes\'", new string[0])]
        [Xunit.InlineDataAttribute("\'(EXT) Please cancel-PL-HOM05006213708/06\'", "\'Good afternoon, With effect 31.05.2024, please can you cancel this policy, I bel" +
            "ieve client is moving in with a relative and insurance no longer required by him" +
            ". Please advise refund and forward cancellation docs when available.\'", "\'No\'", "\'(EXT) Please cancel-PL-HOM05006213708/06\'", "\'I want to cancel\'", "\'Cancellation\'", "\'PL-HOM10003493441/00\'", "5", "\'Cancellation - No longer required\'", "\'Yes\'", new string[0])]
        public void Work_502PickExclusionCriteria(string subject, string body, string attachment, string caseName, string primaryDemand, string demand, string policyReference, string caseDueDate, string reInferLabel, string rPAFlag, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-502",
                    "admin"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("subject", subject);
            argumentsOfScenario.Add("body", body);
            argumentsOfScenario.Add("attachment", attachment);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseDueDate", caseDueDate);
            argumentsOfScenario.Add("ReInferLabel", reInferLabel);
            argumentsOfScenario.Add("RPAFlag", rPAFlag);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-502: Pick exclusion Criteria", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 93
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 94
 testRunner.Given(string.Format("User sends email to UKSC mailbox with subject {0} body {1} and attachment if any " +
                            "{2}", subject, body, attachment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 95
 testRunner.And("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
 testRunner.When("User selects customer service hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 97
 testRunner.Then("User clicks on Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 98
 testRunner.And(string.Format("User searches the email by subject {0} and clicks on the email", subject), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 99
 testRunner.Then(string.Format("User validates the email content like subject {0} body {1}", subject, body), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 100
 testRunner.Then(string.Format("User validates if regarding field is updated with case name {0} and click on the " +
                            "case link", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 101
 testRunner.And(string.Format("User validates case name {0} primary demand {1} demand {2} policy reference {3} c" +
                            "ase due date {4} reinfer label {5} and RPA flag {6}", caseName, primaryDemand, demand, policyReference, caseDueDate, reInferLabel, rPAFlag), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 102
 testRunner.And("User checks case status is set to new", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
 testRunner.Then("User clicks on queue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 104
 testRunner.And("user selects all items and clicks test_uksc", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 105
 testRunner.And(string.Format("User searches the email by subject {0} and validate present in TEST_UKSC queue", subject), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 106
 testRunner.And("User clicks on Dashboards", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 107
 testRunner.And(string.Format("Validates case is not present after clicking on pick work button {0}", subject), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-520: Send an Email to UKSC mailbox & Validate the mail in D365")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-8 feature")]
        [Xunit.TraitAttribute("Description", "Work-520: Send an Email to UKSC mailbox & Validate the mail in D365")]
        [Xunit.TraitAttribute("Category", "work-520")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.InlineDataAttribute("\'RE: Cancel & Replace request - Hiscox Insurance - policy number PL-HOM0500621370" +
            "8/06\'", "\'Hi Tim, Option 2 please!! New policy inception date starting 02/04/2020. Thank y" +
            "ou very much!\'", "\'No\'", "\'RE: Cancel & Replace request - Hiscox Insurance - policy number PL-HOM0500621370" +
            "8/06\'", "\'Error Management\'", "\'Cancel & Replace\'", "\'PL-HOM10003493441/00\'", "1", "\'Cancel and replace\'", "\'No\'", new string[0])]
        [Xunit.InlineDataAttribute("\'(EXT) Mr Guinevere Forbes Renewal - PL-HOM05006213708/06\'", "\'Morning all, I have been informed Mildmay is under offer and will likely be sold" +
            " by the end of the month. Can you please inform me what difference this will mak" +
            "e to the renewal terms/premium if Mildmay is not included?\'", "\'No\'", "\'(EXT) Mr Guinevere Forbes Renewal - PL-HOM05006213708/06\'", "\'I want information\'", "\'Cover Query\'", "\'PL-HOM10003493441/00\'", "5", "\'Underwriting policy queries\'", "\'No\'", new string[0])]
        [Xunit.InlineDataAttribute("\'(EXT) RE: Mr Guinevere Forbes - PL-HOM05006213708/06\'", "\'Apologies, Lionel. Client has also confirmed that the tracker subscription has b" +
            "een renewed for a further 3 years\'", "\'No\'", "\'(EXT) RE: Mr Guinevere Forbes - PL-HOM05006213708/06\'", "\'I want to change\'", "\'Motor change\'", "\'PL-HOM10003493441/00\'", "5", "\'Changes to motor cover\'", "\'No\'", new string[0])]
        [Xunit.InlineDataAttribute("\'(EXT) RE: Quote Required Mr Guinevere Forbes PL-HOM05006213708/06\'", "\'Good ,Morning, Property has a cellar, not habitable though, used for storage. Le" +
            "t me know if you need anything further.\'", "\'No\'", "\'(EXT) RE: Quote Required Mr Guinevere Forbes PL-HOM05006213708/06\'", "\'I want to change\'", "\'Property Changes\'", "\'PL-HOM10003493441/00\'", "5", "\'Property Changes\'", "\'No\'", new string[0])]
        [Xunit.InlineDataAttribute("\'(EXT) RE: Hiscox Insurance - policy number PL-HOM05006213708/06\'", @"'Hi Terry, Please could you give me a call when you get this message. The client is not at all happy with the business exclusion clause that has been put onto the policy and we don’t have enough time prior to renewal date to get this sorted. The exclusion was added onto the renewal on Thursday at 2pm renewal date is tomorrow. The client has been with Hiscox for many years and his circumstances hasn’t changed from the exchange student’s perspective. I look forward to hearing from you ASAP.'", "\'No\'", "\'(EXT) RE: Hiscox Insurance - policy number PL-HOM05006213708/06\'", "\'I want to renew\'", "\'Renewal\'", "\'PL-HOM10003493441/00\'", "30", "\'Underwriting Revised renewals\'", "\'No\'", new string[0])]
        [Xunit.InlineDataAttribute("\'(EXT) FW: Hiscox Insurance - policy number PL-HOM05006213708/06\'", "\'Hi, Please note the above has renewed from 31sy July.\'", "\'No\'", "\'(EXT) FW: Hiscox Insurance - policy number PL-HOM05006213708/06\'", "\'I want information\'", "\'Documents\'", "\'PL-HOM10003493441/00\'", "5", "\'Documentation\'", "\'No\'", new string[0])]
        [Xunit.InlineDataAttribute("\'(EXT) RE: Hiscox Insurance for Mr Guinevere Forbes – policy number PL-HOM0500621" +
            "3708/06\'", "\'Hi Norbert, Please could you provide a copy of the clients No claims bonus, the " +
            "client requires this for her new insurer\'", "\'No\'", "\'(EXT) RE: Hiscox Insurance for Mr Guinevere Forbes – policy number PL-HOM0500621" +
            "3708/06\'", "\'I want information\'", "\'Cover Query\'", "\'PL-HOM10003493441/00\'", "5", "\'Underwriting policy queries\'", "\'No\'", new string[0])]
        [Xunit.InlineDataAttribute("\'(EXT) RE:  Hiscox Insurance for Mr Guinevere Forbes – policy number  PL-HOM05006" +
            "213708/06\'", @"'Hey guys, The client has sent us this: Chris, when should the direct debits to Hiscox for the Edwardes Square insurance stop? There was a direct debit of £1,192 paid on 1st July. Is that correct? I believe you have taken a DD when this policy cancelled. Can you please confirm if this is correct and that the payment will be refunded ASAP.'", "\'No\'", "\'(EXT) RE:  Hiscox Insurance for Mr Guinevere Forbes – policy number  PL-HOM05006" +
            "213708/06\'", "\'I want to change\'", "\'Payments\'", "\'PL-HOM10003493441/00\'", "5", "\'Payments query\'", "\'No\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Address change - Mr Guinevere Forbes PL-HOM05006213708/06\'", "\'Hi, Good morning! Could you please update my address? Existing address: Test Bui" +
            "lding 38 Innes Street Woodford Green NW1 6HU New address: Test Building 38 Innes" +
            " Street Woodford Green NW2 6HU. Thanks\'", "\'No\'", "\'Address change - Maisie Villarreal PL-HOM05006213708/06\'", "\'I want to change\'", "\'Contact change\'", "\'PL-HOM10003493441/00\'", "5", "\'Change of address\'", "\'No\'", new string[0])]
        [Xunit.InlineDataAttribute("\'FW: (EXT) RE: Hiscox Insurance for Mr Guinevere Forbes PL-HOM05006213708/06\'", "\'Hi, Please cancel this off from inception.\'", "\'No\'", "\'FW: (EXT) RE: Hiscox Insurance for Mr Guinevere Forbes PL-HOM05006213708/06\'", "\'I want to cancel\'", "\'Cancellation\'", "\'PL-HOM10003493441/00\'", "5", "\'Cancellation - Lapse\'", "\'Yes\'", new string[0])]
        [Xunit.InlineDataAttribute("\'(EXT) RE: Hiscox Insurance for Mr Guinevere Forbes- quote number PL-HOM050062137" +
            "08/06\'", "\'Hi Louise, The above client has decided to go elsewhere for their insurance. Can" +
            " you please lapse?\'", "\'No\'", "\'(EXT) RE: Hiscox Insurance for Mr Guinevere Forbes- quote number PL-HOM050062137" +
            "08/06\'", "\'I want to cancel\'", "\'Cancellation\'", "\'PL-HOM10003493441/00\'", "5", "\'Cancellation - Broker lost client\'", "\'Yes\'", new string[0])]
        [Xunit.InlineDataAttribute("\'RE: (EXT) RE: Hiscox Insurance - policy number PL-HOM05006213708/06\'", "\'Jack, I don’t know as cover lapsed from first renewal/works. Not received any pa" +
            "yment. Would be great to NTU this case.\'", "\'No\'", "\'RE: (EXT) RE: Hiscox Insurance - policy number PL-HOM05006213708/06\'", "\'I want to cancel\'", "\'Cancellation\'", "\'PL-HOM10003493441/00\'", "5", "\'Cancellation - Lapse\'", "\'Yes\'", new string[0])]
        [Xunit.InlineDataAttribute("\'(EXT) Please cancel-PL-HOM05006213708/06\'", "\'Good afternoon, With effect 31.05.2024, please can you cancel this policy, I bel" +
            "ieve client is moving in with a relative and insurance no longer required by him" +
            ". Please advise refund and forward cancellation docs when available.\'", "\'No\'", "\'(EXT) Please cancel-PL-HOM05006213708/06\'", "\'I want to cancel\'", "\'Cancellation\'", "\'PL-HOM10003493441/00\'", "5", "\'Cancellation - No longer required\'", "\'Yes\'", new string[0])]
        public void Work_520SendAnEmailToUKSCMailboxValidateTheMailInD365(string subject, string body, string attachment, string caseName, string primaryDemand, string demand, string policyReference, string caseDueDate, string reInferLabel, string rPAFlag, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-520",
                    "admin"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("subject", subject);
            argumentsOfScenario.Add("body", body);
            argumentsOfScenario.Add("attachment", attachment);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseDueDate", caseDueDate);
            argumentsOfScenario.Add("ReInferLabel", reInferLabel);
            argumentsOfScenario.Add("RPAFlag", rPAFlag);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-520: Send an Email to UKSC mailbox & Validate the mail in D365", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 120
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 121
 testRunner.Given(string.Format("User sends email to UKSC mailbox with subject {0} body {1} and attachment if any " +
                            "{2}", subject, body, attachment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 122
 testRunner.And("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 123
 testRunner.When("User selects customer service hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 124
 testRunner.Then("User clicks on Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 125
 testRunner.And(string.Format("User searches the email by subject {0} and clicks on the email", subject), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 126
 testRunner.Then(string.Format("User validates the email content like subject {0} body {1}", subject, body), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 127
 testRunner.Then(string.Format("User validates if regarding field is updated with case name {0} and click on the " +
                            "case link", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 128
 testRunner.And(string.Format("User validates case name {0} primary demand {1} demand {2} policy reference {3} c" +
                            "ase due date {4} reinfer label {5} and RPA flag {6}", caseName, primaryDemand, demand, policyReference, caseDueDate, reInferLabel, rPAFlag), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-520: Validate case SLA")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-8 feature")]
        [Xunit.TraitAttribute("Description", "Work-520: Validate case SLA")]
        [Xunit.TraitAttribute("Category", "work-520")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.InlineDataAttribute("\'Admin\'", "\'TestCase1\'", "\'I want information\'", "\'Documents\'", "\'Send Certificate\'", "\'sarah marta\'", "\'Motor\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "5", new string[0])]
        public void Work_520ValidateCaseSLA(string userRole, string caseName, string primaryDemand, string demand, string subDemand, string customer, string product, string policyReference, string caseDueDate, string numberOfDays, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-520",
                    "admin"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseDueDate", caseDueDate);
            argumentsOfScenario.Add("numberOfDays", numberOfDays);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-520: Validate case SLA", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 149
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 150
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 151
 testRunner.When("User selects customer service hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 152
 testRunner.And(string.Format("User {0} creates new case {1} {2} {3} {4} {5} {6} {7} {8}", userRole, caseName, primaryDemand, demand, subDemand, customer, policyReference, caseDueDate, product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 153
 testRunner.Then(string.Format("User saves the case {0} with {1}", caseName, primaryDemand), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 154
 testRunner.Then("User validate the status of the case", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 155
 testRunner.And(string.Format("User validates the case due date {0} for primary demand {1}", numberOfDays, primaryDemand), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Work-143: Validate case SLA")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-8 feature")]
        [Xunit.TraitAttribute("Description", "Work-143: Validate case SLA")]
        [Xunit.TraitAttribute("Category", "work-143")]
        [Xunit.TraitAttribute("Category", "admin")]
        public void Work_143ValidateCaseSLA()
        {
            string[] tagsOfScenario = new string[] {
                    "work-143",
                    "admin"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-143: Validate case SLA", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 165
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 166
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 167
 testRunner.When("User selects customer service hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldName"});
                table26.AddRow(new string[] {
                            "\'CaseName\'"});
                table26.AddRow(new string[] {
                            "\'PrimaryDemand\'"});
                table26.AddRow(new string[] {
                            "\'Customer\'"});
                table26.AddRow(new string[] {
                            "\'PolicyReference\'"});
#line 168
 testRunner.And("User validates the mandatory fields error messages", ((string)(null)), table26, "And ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "userRole",
                            "CaseName",
                            "PrimaryDemand",
                            "Demand",
                            "SubDemand",
                            "Customer",
                            "Product",
                            "PolicyReference",
                            "CaseDueDate",
                            "numberOfDays"});
                table27.AddRow(new string[] {
                            "\'Admin\'",
                            "\'TestCase1\'",
                            "\'I want information\'",
                            "\'Documents\'",
                            "\'Send Certificate\'",
                            "\'sarah marta\'",
                            "\'Motor\'",
                            "\'PL-HOM10003493441/00\'",
                            "\'10/10/2024\'",
                            "5"});
                table27.AddRow(new string[] {
                            "\'Admin\'",
                            "\'TestCase2\'",
                            "\'I want to change\'",
                            "\'Motor change\'",
                            "\'Add Driver\'",
                            "\'sarah marta\'",
                            "\'Motor\'",
                            "\'PL-HOM10003493441/00\'",
                            "\'10/11/2024\'",
                            "5"});
                table27.AddRow(new string[] {
                            "\'Admin\'",
                            "\'TestCase3\'",
                            "\'I want to cancel\'",
                            "\'Cancellation\'",
                            "\'Cancellation Request\'",
                            "\'sarah marta\'",
                            "\'Property\'",
                            "\'PL-HOM10003493441/00\'",
                            "\'10/11/2024\'",
                            "5"});
                table27.AddRow(new string[] {
                            "\'Admin\'",
                            "\'TestCase4\'",
                            "\'I want to renew\'",
                            "\'Renewal\'",
                            "\'Review Renewal\'",
                            "\'sarah marta\'",
                            "\'Building works\'",
                            "\'PL-HOM10003493441/00\'",
                            "\'10/11/2024\'",
                            "30"});
                table27.AddRow(new string[] {
                            "\'Admin\'",
                            "\'TestCase5\'",
                            "\'Error Management\'",
                            "\'Cancel & Replace\'",
                            "\'NA\'",
                            "\'sarah marta\'",
                            "\'Motor\'",
                            "\'PL-HOM10003493441/00\'",
                            "\'10/11/2024\'",
                            "1"});
#line 174
 testRunner.Then("User creates new case and validates case status, case due date, case number and s" +
                        "itemap", ((string)(null)), table27, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "CaseName"});
                table28.AddRow(new string[] {
                            "\'TestCase1\'"});
                table28.AddRow(new string[] {
                            "\'TestCase2\'"});
                table28.AddRow(new string[] {
                            "\'TestCase3\'"});
                table28.AddRow(new string[] {
                            "\'TestCase4\'"});
                table28.AddRow(new string[] {
                            "\'TestCase5\'"});
#line 181
 testRunner.And("User cancel the case", ((string)(null)), table28, "And ");
#line hidden
#line 188
 testRunner.And("User clicks on sign out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="work-127 User validates fields required in Quick Create")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-8 feature")]
        [Xunit.TraitAttribute("Description", "work-127 User validates fields required in Quick Create")]
        [Xunit.TraitAttribute("Category", "work-127")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.InlineDataAttribute("\'Admin\'", "\'TestCase127A1\'", "\'I want information\'", "\'Documents\'", "\'Send Certificate\'", "\'sarah marta\'", "\'Property\'", "\'Amitsharma Jaiprakash\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "5", new string[0])]
        public void Work_127UserValidatesFieldsRequiredInQuickCreate(string userRole, string caseName, string primaryDemand, string demand, string subDemand, string customer, string product, string owner, string policyReference, string caseDueDate, string numberOfDays, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-127",
                    "admin"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("Owner", owner);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseDueDate", caseDueDate);
            argumentsOfScenario.Add("numberOfDays", numberOfDays);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("work-127 User validates fields required in Quick Create", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 191
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 192
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 193
 testRunner.When("User selects customer service hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "userRole",
                            "CaseName",
                            "PrimaryDemand",
                            "Demand",
                            "SubDemand",
                            "Customer",
                            "Product",
                            "PolicyReference",
                            "CaseDueDate",
                            "numberOfDays"});
                table29.AddRow(new string[] {
                            "\'Admin\'",
                            "\'TestCase127A\'",
                            "\'I want information\'",
                            "\'Documents\'",
                            "\'Send Certificate\'",
                            "\'sarah marta\'",
                            "\'Motor\'",
                            "\'PL-HOM10003493441/00\'",
                            "\'10/10/2024\'",
                            "5"});
#line 194
 testRunner.Then("User creates new case and validates case status, case due date, case number and s" +
                        "itemap", ((string)(null)), table29, "Then ");
#line hidden
#line 198
 testRunner.Then("User clicks on Case Relationships tab and clicks on new case button to add a quic" +
                        "k case", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 199
 testRunner.And("User validates the fields displayed for quick case \'Parent Case\' \'Case Name\' \'Own" +
                        "er\' \'Customer\' \'Policy Reference Number\' \'Policy Reference\' \'Primary Demand\' \'De" +
                        "mand\' \'Sub-demand\' \'Product\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 200
 testRunner.Then(string.Format("User validates the pre populated Parent Case {0} Case Name as Demand {1} Owner {2" +
                            "} Customer {2} Policy Reference Number {3} and Product {4}", caseName, demand, customer, policyReference, product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="work-127 User creates the Quick Create and validate child case due date also vali" +
            "date if it is linked in case timeline")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-8 feature")]
        [Xunit.TraitAttribute("Description", "work-127 User creates the Quick Create and validate child case due date also vali" +
            "date if it is linked in case timeline")]
        [Xunit.TraitAttribute("Category", "work-127")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.InlineDataAttribute("\'Admin\'", "\'TestCase127B1\'", "\'I want to renew\'", "\'Renewal\'", "\'Review Renewal\'", "\'sarah marta\'", "\'Property\'", "\'Amitsharma Jaiprakash\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "5", new string[0])]
        public void Work_127UserCreatesTheQuickCreateAndValidateChildCaseDueDateAlsoValidateIfItIsLinkedInCaseTimeline(string userRole, string caseName, string primaryDemand, string demand, string subDemand, string customer, string product, string owner, string policyReference, string caseDueDate, string numberOfDays, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-127",
                    "admin"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("Owner", owner);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseDueDate", caseDueDate);
            argumentsOfScenario.Add("numberOfDays", numberOfDays);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("work-127 User creates the Quick Create and validate child case due date also vali" +
                    "date if it is linked in case timeline", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 207
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 208
 testRunner.Given(string.Format("User logged in to Dynamics application with {0}", userRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 209
 testRunner.When(string.Format("User {0} creates new case {1} {2} {3} {4} {5} {6} {7} {8}", userRole, caseName, primaryDemand, demand, subDemand, customer, policyReference, caseDueDate, product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 210
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 211
 testRunner.Then(string.Format("User selects newly created case {0}", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "ChildPrimaryDemand",
                            "ChildDemand",
                            "ChildSubDemand",
                            "numberOfDays"});
                table30.AddRow(new string[] {
                            "\'I want to change\'",
                            "\'Motor change\'",
                            "\'Add Driver\'",
                            "5"});
#line 212
 testRunner.Then(string.Format("User enters the mandatory fields primary demand <ChildPrimaryDemand> demand <Chil" +
                            "dDemand> sub demand <ChildSubDemand> and validates SLA start date of child case " +
                            "{0} also child case is shown in timeline.", numberOfDays), ((string)(null)), table30, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="work-127 User creates the Quick Create and validate child case due date is calcua" +
            "ted from email receive date also validate if it is linked in case timeline")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-8 feature")]
        [Xunit.TraitAttribute("Description", "work-127 User creates the Quick Create and validate child case due date is calcua" +
            "ted from email receive date also validate if it is linked in case timeline")]
        [Xunit.TraitAttribute("Category", "work-127")]
        [Xunit.TraitAttribute("Category", "admin")]
        public void Work_127UserCreatesTheQuickCreateAndValidateChildCaseDueDateIsCalcuatedFromEmailReceiveDateAlsoValidateIfItIsLinkedInCaseTimeline()
        {
            string[] tagsOfScenario = new string[] {
                    "work-127",
                    "admin"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("work-127 User creates the Quick Create and validate child case due date is calcua" +
                    "ted from email receive date also validate if it is linked in case timeline", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 223
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "subject",
                            "body",
                            "attachment"});
                table31.AddRow(new string[] {
                            "\'PL-HOM10003101233/01\'",
                            "\'Hi Sarah The above client has decided to go elsewhere for their insurance. Can y" +
                                "ou please lapse?\'",
                            "\'No\'"});
#line 224
 testRunner.Given("User sends email to UKSC mailbox", ((string)(null)), table31, "Given ");
#line hidden
#line 230
 testRunner.And("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 231
 testRunner.When("User selects customer service hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "ChildPrimaryDemand",
                            "ChildDemand",
                            "ChildSubDemand",
                            "numberOfDays"});
                table32.AddRow(new string[] {
                            "\'I want to cancel\'",
                            "\'Cancellation\'",
                            "\'Cancellation Request\'",
                            "5"});
#line 232
 testRunner.And("User creates child case and validates SLA", ((string)(null)), table32, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="work-127 User creates the Quick Create and SLA Start Date for the child case will" +
            " be as applied for “I want to renew”")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-8 feature")]
        [Xunit.TraitAttribute("Description", "work-127 User creates the Quick Create and SLA Start Date for the child case will" +
            " be as applied for “I want to renew”")]
        [Xunit.TraitAttribute("Category", "work-127")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.InlineDataAttribute("\'Admin\'", "\'TestCase127C1\'", "\'I want information\'", "\'Documents\'", "\'Send Certificate\'", "\'sarah marta\'", "\'Property\'", "\'Amitsharma Jaiprakash\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "5", new string[0])]
        public void Work_127UserCreatesTheQuickCreateAndSLAStartDateForTheChildCaseWillBeAsAppliedForIWantToRenew(string userRole, string caseName, string primaryDemand, string demand, string subDemand, string customer, string product, string owner, string policyReference, string caseDueDate, string numberOfDays, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-127",
                    "admin"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("Owner", owner);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseDueDate", caseDueDate);
            argumentsOfScenario.Add("numberOfDays", numberOfDays);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("work-127 User creates the Quick Create and SLA Start Date for the child case will" +
                    " be as applied for “I want to renew”", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 240
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 241
 testRunner.Given("User logged in to Dynamics application with \'Admin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 242
 testRunner.When(string.Format("User {0} creates new case {1} {2} {3} {4} {5} {6} {7} {8}", userRole, caseName, primaryDemand, demand, subDemand, customer, policyReference, caseDueDate, product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 243
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 244
 testRunner.Then(string.Format("User selects newly created case {0}", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "ChildPrimaryDemand",
                            "ChildDemand",
                            "ChildSubDemand",
                            "numberOfDays"});
                table33.AddRow(new string[] {
                            "\'I want to renew\'",
                            "\'Renewal\'",
                            "\'Review Renewal\'",
                            "30"});
#line 245
 testRunner.Then(string.Format("User enters the mandatory fields primary demand <ChildPrimaryDemand> demand <Chil" +
                            "dDemand> sub demand <ChildSubDemand> and validates SLA start date of child case " +
                            "{0} also child case is shown in timeline.", numberOfDays), ((string)(null)), table33, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-176: Case Pending/Unpending SLA")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-8 feature")]
        [Xunit.TraitAttribute("Description", "Work-176: Case Pending/Unpending SLA")]
        [Xunit.TraitAttribute("Category", "work-176")]
        [Xunit.TraitAttribute("Category", "regression")]
        [Xunit.TraitAttribute("Category", "smoke")]
        [Xunit.TraitAttribute("Category", "caseWorker")]
        [Xunit.TraitAttribute("Category", "smoke3")]
        [Xunit.InlineDataAttribute("\'Case Worker\'", "\'TestCase1\'", "\'I want information\'", "\'Documents\'", "\'Send Certificate\'", "\'sarah marta\'", "\'Motor\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "5", "\'Save\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Case Worker\'", "\'TestCase2\'", "\'I want information\'", "\'Documents\'", "\'Send Certificate\'", "\'sarah marta\'", "\'Motor\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "5", "\'Save and Close\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Case Worker\'", "\'TestCase3\'", "\'I want information\'", "\'Documents\'", "\'Send Certificate\'", "\'sarah marta\'", "\'Motor\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "5", "\'Save and Route\'", new string[0])]
        public void Work_176CasePendingUnpendingSLA(string userRole, string caseName, string primaryDemand, string demand, string subDemand, string customer, string product, string policyReference, string caseDueDate, string numberOfDays, string saveType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-176",
                    "regression",
                    "smoke",
                    "caseWorker",
                    "smoke3"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseDueDate", caseDueDate);
            argumentsOfScenario.Add("numberOfDays", numberOfDays);
            argumentsOfScenario.Add("SaveType", saveType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-176: Case Pending/Unpending SLA", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 256
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 257
 testRunner.Given("User logged in to Dynamics application with \'Caseworker\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 258
 testRunner.When(string.Format("User {0} creates new case {1} {2} {3} {4} {5} {6} {7} {8}", userRole, caseName, primaryDemand, demand, subDemand, customer, policyReference, caseDueDate, product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 259
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 260
 testRunner.Then("User validate the status of the case", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 261
 testRunner.And("User changes the Case status to \'On Hold\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 262
 testRunner.Then(string.Format("User clicks on {0} button", saveType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 263
 testRunner.And(string.Format("User selects the Case {0} and validates Case Status", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 264
 testRunner.Then(string.Format("user validate the status of the case {0} as \'On Hold\'", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 265
 testRunner.And(string.Format("User selects newly created case {0}", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 266
 testRunner.And("User changes the Case status to \'In Progress\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 267
 testRunner.Then(string.Format("User clicks on {0} button", saveType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 268
 testRunner.And(string.Format("User selects the Case {0} and validates Case Status", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 269
 testRunner.Then(string.Format("user validate the status of the case {0} as \'In Progress\'", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-44: SLA Stoppage Entity - Manual Pending Case with Dependency")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-8 feature")]
        [Xunit.TraitAttribute("Description", "Work-44: SLA Stoppage Entity - Manual Pending Case with Dependency")]
        [Xunit.TraitAttribute("Category", "Work-44")]
        [Xunit.TraitAttribute("Category", "Admin")]
        [Xunit.InlineDataAttribute("\'Admin\'", "\'TestSLA44A\'", "\'I want information\'", "\'Documents\'", "\'Send Certificate\'", "\'sarah marta\'", "\'Motor\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Admin\'", "\'TestSLA44B\'", "\'I want to change\'", "\'Motor change\'", "\'Add Driver\'", "\'sarah marta\'", "\'Property\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Admin\'", "\'TestSLA44C\'", "\'I want to cancel\'", "\'Cancellation\'", "\'Cancellation Request\'", "\'sarah marta\'", "\'Building works\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Admin\'", "\'TestSLA44D\'", "\'I want to renew\'", "\'Renewal\'", "\'Review Renewal\'", "\'sarah marta\'", "\'Motor\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Admin\'", "\'TestSLA44E\'", "\'Error Management\'", "\'Cancel & Replace\'", "\'NA\'", "\'sarah marta\'", "\'Property\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Admin\'", "\'TestSLA44F\'", "\'I want information\'", "\'Documents\'", "\'Send Certificate\'", "\'sarah marta\'", "\'Property\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Admin\'", "\'TestSLA44G\'", "\'I want to cancel\'", "\'Cancellation\'", "\'Cancellation Request\'", "\'sarah marta\'", "\'Motor\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", new string[0])]
        public void Work_44SLAStoppageEntity_ManualPendingCaseWithDependency(string userRole, string caseName, string primaryDemand, string demand, string subDemand, string customer, string product, string policyReference, string caseDueDate, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-44",
                    "Admin"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseDueDate", caseDueDate);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-44: SLA Stoppage Entity - Manual Pending Case with Dependency", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 280
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 281
 testRunner.Given(string.Format("User logged in to Dynamics application with {0}", userRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 282
 testRunner.When(string.Format("User {0} creates new case {1} {2} {3} {4} {5} {6} {7} {8}", userRole, caseName, primaryDemand, demand, subDemand, customer, policyReference, caseDueDate, product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 283
 testRunner.Then("User clicks on save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 284
 testRunner.When("User clicks on SLA Stoppages tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 285
 testRunner.And("User click the New button from SLA Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 286
 testRunner.Then("User validate the fields are displayed \'Case\' \'Pended Time\' and \'Unpended Time\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 287
 testRunner.When(string.Format("User create new SLA for the caseName {0}, pended time as \'today\' and unpended tim" +
                            "e as \'tomorrow\'", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 288
 testRunner.And("User click on the Save button in new SLA stoppage page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 289
 testRunner.Then(string.Format("User validate the status as \'On Hold\' for the case {0}", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 290
 testRunner.When("User clicks on SLA Stoppages tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 291
 testRunner.And(string.Format("User select the SLA Stoppage for the case {0}", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 292
 testRunner.And("User clicks the \'Deactivate\' button on the SLA home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 293
 testRunner.And("User select the \'Deactivate\' button on the confim popup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 294
 testRunner.Then(string.Format("User validate the status as \'In Progress\' for the case {0}", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 295
 testRunner.And(string.Format("user cancel the case {0}", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-523: Contact Screen changes")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-8 feature")]
        [Xunit.TraitAttribute("Description", "Work-523: Contact Screen changes")]
        [Xunit.TraitAttribute("Category", "Work523,")]
        [Xunit.TraitAttribute("Category", "regression")]
        [Xunit.TraitAttribute("Category", "Caseworker")]
        [Xunit.TraitAttribute("Category", "smoke3")]
        [Xunit.InlineDataAttribute("\'Maheee\'", "\'Dhoni\'", "\'maheee@test.com\'", "\'Camac\'", "\'12\'", new string[0])]
        public void Work_523ContactScreenChanges(string firstname, string surname, string email, string street, string houseNr, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work523,",
                    "regression",
                    "Caseworker",
                    "smoke3"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Firstname", firstname);
            argumentsOfScenario.Add("Surname", surname);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Street", street);
            argumentsOfScenario.Add("House Nr", houseNr);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-523: Contact Screen changes", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 310
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 311
 testRunner.Given("User logged in to Dynamics application with \'Case Worker\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 312
 testRunner.And("User Clicks on Contacts from Customers AreaGroup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 313
 testRunner.And("User Clicks on New button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 314
 testRunner.Then("details tab in contact screen should be hidden", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 315
 testRunner.Then("Summary page should be displayed for the contact", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 316
 testRunner.Then(string.Format("User Enters Contact details as {0} {1} {2} {3} {4}", firstname, surname, email, street, houseNr), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 317
 testRunner.Then("User Clicks on Save", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 318
 testRunner.Then(string.Format("Summary page should have Correspondence address as Concatenation of {0} and {1}", street, houseNr), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 319
 testRunner.And(string.Format("{0} and {1} should be removed from the form", street, houseNr), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                WORKSprint_8FeatureFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                WORKSprint_8FeatureFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
