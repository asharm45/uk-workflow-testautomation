// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace WorkflowSpecflowTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class WORKSprint_9FeatureFeature : object, Xunit.IClassFixture<WORKSprint_9FeatureFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "WORK Sprint-9.feature"
#line hidden
        
        public WORKSprint_9FeatureFeature(WORKSprint_9FeatureFeature.FixtureData fixtureData, WorkflowSpecflowTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en"), "Features", "WORK Sprint-9 feature", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-64: View Policy data - Case Management - admin")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-9 feature")]
        [Xunit.TraitAttribute("Description", "Work-64: View Policy data - Case Management - admin")]
        [Xunit.TraitAttribute("Category", "Work64")]
        [Xunit.TraitAttribute("Category", "regression")]
        [Xunit.InlineDataAttribute("\'admin\'", "\'Jadeja\'", "\'Dhoni\'", "\'Jadduu@test.com\'", "\'Camac\'", "\'12\'", new string[0])]
        public void Work_64ViewPolicyData_CaseManagement_Admin(string profile, string firstname, string surname, string email, string street, string houseNr, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work64",
                    "regression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Profile", profile);
            argumentsOfScenario.Add("Firstname", firstname);
            argumentsOfScenario.Add("Surname", surname);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Street", street);
            argumentsOfScenario.Add("House Nr", houseNr);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-64: View Policy data - Case Management - admin", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given(string.Format("User logged in Dynamics application with {0}", profile), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.And("User Clicks on Contacts from Customers AreaGroup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
 testRunner.And("User Clicks on New button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.Then(string.Format("User Enters Contact details as {0} {1} {2} {3} {4}", firstname, surname, email, street, houseNr), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
 testRunner.And("User Clicks on Save", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.When("User open the contact <>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
 testRunner.And(string.Format("User can be edit the fields <FirstName>{0}{1}", surname, email), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.Then("User Clicks on Save", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
 testRunner.When("User select the contact <>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 16
 testRunner.And("User click on the delete button for the contact", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-64: View Policy data - Case Management - TeamLead")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-9 feature")]
        [Xunit.TraitAttribute("Description", "Work-64: View Policy data - Case Management - TeamLead")]
        [Xunit.TraitAttribute("Category", "Work64")]
        [Xunit.TraitAttribute("Category", "regression")]
        [Xunit.InlineDataAttribute("\'TeamLead\'", "\'Mahen\'", "\'Dhoni\'", "\'TeamLead@test.com\'", "\'Camac\'", "\'12\'", new string[0])]
        public void Work_64ViewPolicyData_CaseManagement_TeamLead(string profile, string firstname, string surname, string email, string street, string houseNr, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work64",
                    "regression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Profile", profile);
            argumentsOfScenario.Add("Firstname", firstname);
            argumentsOfScenario.Add("Surname", surname);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Street", street);
            argumentsOfScenario.Add("House Nr", houseNr);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-64: View Policy data - Case Management - TeamLead", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 24
 testRunner.Given("User logged in Dynamics application with \'Admin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 25
 testRunner.And("User Clicks on Contacts from Customers AreaGroup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.And("User Clicks on New button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.Then(string.Format("User Enters Contact details as {0} {1} {2} {3} {4}", firstname, surname, email, street, houseNr), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
 testRunner.And("User Clicks on Save", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.Given(string.Format("User logged in Dynamics application with {0}", profile), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 30
 testRunner.When("User open the contact <>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 31
 testRunner.And(string.Format("User unable to edit the fields <FirstName>{0}{1}", surname, email), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.When("User select the contact <>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
 testRunner.And("User unable to view the delete button on top menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-75: View Renewal details of Policy - Case Management")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-9 feature")]
        [Xunit.TraitAttribute("Description", "Work-75: View Renewal details of Policy - Case Management")]
        [Xunit.TraitAttribute("Category", "Work-75")]
        [Xunit.TraitAttribute("Category", "smoke")]
        [Xunit.InlineDataAttribute("\'Caseworker\'", "\'PL-HOM10003500586/00\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Caseworker\'", "\'PL-HOM10003500486/01\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Caseworker\'", "\'PL-EAH10003500886/01\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Caseworker\'", "\'PL-HOM10001802378/19\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Caseworker\'", "\'PL-HOM10003285995/02\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Caseworker\'", "\'PL-HOM10003364501/07\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Caseworker\'", "\'PL-HOM10005679870/02\'", new string[0])]
        public void Work_75ViewRenewalDetailsOfPolicy_CaseManagement(string userRole, string policy, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Work-75",
                    "smoke"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("Policy", policy);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-75: View Renewal details of Policy - Case Management", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 42
 testRunner.Given(string.Format("User logged in to Dynamics application with {0}", userRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 43
 testRunner.Then(string.Format("User Clicks on Policies {0}", policy), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 44
 testRunner.And("User Validates the user policy renewal date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
 testRunner.And("Check Whether it\'s read-only", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Work-74: View Renewal details APC - Case Management")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-9 feature")]
        [Xunit.TraitAttribute("Description", "Work-74: View Renewal details APC - Case Management")]
        [Xunit.TraitAttribute("Category", "work-74")]
        [Xunit.TraitAttribute("Category", "Caseworker")]
        [Xunit.TraitAttribute("Category", "teamlead")]
        [Xunit.TraitAttribute("Category", "admin")]
        public void Work_74ViewRenewalDetailsAPC_CaseManagement()
        {
            string[] tagsOfScenario = new string[] {
                    "work-74",
                    "Caseworker",
                    "teamlead",
                    "admin"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-74: View Renewal details APC - Case Management", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 62
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 63
 testRunner.Given("User logged in to Dynamics application with \'Admin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 65
 testRunner.When("User makes policy summary api call and loads policy \'PL-HOM123456789\' and validat" +
                        "es Policy Renewal Date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 66
 testRunner.Then("User validates the Policy Renewal Date field is ready only", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Work-74: View Renewal details eTrading - Case Management")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-9 feature")]
        [Xunit.TraitAttribute("Description", "Work-74: View Renewal details eTrading - Case Management")]
        [Xunit.TraitAttribute("Category", "work-74")]
        [Xunit.TraitAttribute("Category", "Caseworker")]
        [Xunit.TraitAttribute("Category", "teamlead")]
        [Xunit.TraitAttribute("Category", "admin")]
        public void Work_74ViewRenewalDetailsETrading_CaseManagement()
        {
            string[] tagsOfScenario = new string[] {
                    "work-74",
                    "Caseworker",
                    "teamlead",
                    "admin"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-74: View Renewal details eTrading - Case Management", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 70
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 71
 testRunner.Given("User logged in to Dynamics application with \'Admin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 73
 testRunner.When("User makes policy summary api call and loads policy \'E-PL-HOM123456789\' and valid" +
                        "ates Policy Renewal Date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 74
 testRunner.Then("User validates the Policy Renewal Date field is ready only", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Work-74: View Renewal details PSC - Case Management")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-9 feature")]
        [Xunit.TraitAttribute("Description", "Work-74: View Renewal details PSC - Case Management")]
        [Xunit.TraitAttribute("Category", "work-74")]
        [Xunit.TraitAttribute("Category", "Caseworker")]
        [Xunit.TraitAttribute("Category", "teamlead")]
        [Xunit.TraitAttribute("Category", "admin")]
        public void Work_74ViewRenewalDetailsPSC_CaseManagement()
        {
            string[] tagsOfScenario = new string[] {
                    "work-74",
                    "Caseworker",
                    "teamlead",
                    "admin"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-74: View Renewal details PSC - Case Management", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 77
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 78
 testRunner.Given("User logged in to Dynamics application with \'Admin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 80
 testRunner.When("User makes policy summary api call and loads policy \'PL-HOM123456789\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 81
 testRunner.Then("User validates the policy is not loaded into Dynamics", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Work-94: Primary Product Identification - Automatic")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-9 feature")]
        [Xunit.TraitAttribute("Description", "Work-94: Primary Product Identification - Automatic")]
        [Xunit.TraitAttribute("Category", "work-94")]
        [Xunit.TraitAttribute("Category", "admin")]
        public void Work_94PrimaryProductIdentification_Automatic()
        {
            string[] tagsOfScenario = new string[] {
                    "work-94",
                    "admin"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-94: Primary Product Identification - Automatic", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 87
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 88
 testRunner.Given("User fetch policy number from Merlin where policy has product Motor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "sender",
                            "to",
                            "subject",
                            "body",
                            "attachment"});
                table34.AddRow(new string[] {
                            "\'Svc_HiscoxUKWorkflowAuto3\'",
                            "\'Test_UKSC_Dynamics\'",
                            "\'(EXT) RE: Mr Guinevere Forbes - PL-HOM05006213708/06\'",
                            "\'Apologies, Lionel. Client has also confirmed that the tracker subscription has b" +
                                "een renewed for a further 3 years\'",
                            "\'No\'"});
#line 89
 testRunner.And("User sends an email to UKSC mailbox", ((string)(null)), table34, "And ");
#line hidden
#line 92
 testRunner.And("User logged in to Dynamics application with \'Admin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 93
 testRunner.When("User selects customer service hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 94
 testRunner.Then("User clicks on Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 95
 testRunner.And("User searches the email by subject and clicks on the email", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
 testRunner.Then("User validates the email content", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 97
 testRunner.And("User clicks on regarding", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 98
 testRunner.And("User validates the product name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-94: Primary Product Identification - Manual")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-9 feature")]
        [Xunit.TraitAttribute("Description", "Work-94: Primary Product Identification - Manual")]
        [Xunit.TraitAttribute("Category", "work-94")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.InlineDataAttribute("\'Caseworker\'", "\'TaskDueDate2\'", "\'I want to change\'", "\'Motor change\'", "\'Add Driver\'", "\'sarah marta\'", "\'Property\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "5", new string[0])]
        public void Work_94PrimaryProductIdentification_Manual(string userRole, string caseName, string primaryDemand, string demand, string subDemand, string customer, string product, string policyReference, string caseDueDate, string numberOfDays, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-94",
                    "admin"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseDueDate", caseDueDate);
            argumentsOfScenario.Add("numberOfDays", numberOfDays);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-94: Primary Product Identification - Manual", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 101
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 102
 testRunner.Given("User fetch policy number from Merlin where policy has product Motor and Building " +
                        "works", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 103
 testRunner.And("User logged in to Dynamics application with \'Admin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 104
 testRunner.When("User selects customer service hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 105
 testRunner.And(string.Format("User {0} creates new case {1} {2} {3} {4} {5} {6} {7} {8}", userRole, caseName, primaryDemand, demand, subDemand, customer, policyReference, caseDueDate, product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 106
 testRunner.Then("User calls GetInfo API and validates product updates to Motor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-94: Primary Product Identification - Override Product")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-9 feature")]
        [Xunit.TraitAttribute("Description", "Work-94: Primary Product Identification - Override Product")]
        [Xunit.TraitAttribute("Category", "work-94")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.InlineDataAttribute("\'Caseworker\'", "\'TaskDueDate2\'", "\'I want to change\'", "\'Motor change\'", "\'Add Driver\'", "\'sarah marta\'", "\'Property\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "5", new string[0])]
        public void Work_94PrimaryProductIdentification_OverrideProduct(string userRole, string caseName, string primaryDemand, string demand, string subDemand, string customer, string product, string policyReference, string caseDueDate, string numberOfDays, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-94",
                    "admin"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseDueDate", caseDueDate);
            argumentsOfScenario.Add("numberOfDays", numberOfDays);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-94: Primary Product Identification - Override Product", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 112
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 113
 testRunner.Given("User fetch policy number from Merlin where policy has product Motor and Building " +
                        "works", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 114
 testRunner.And("User logged in to Dynamics application with \'Admin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
 testRunner.When("User selects customer service hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 116
 testRunner.And(string.Format("User {0} creates new case {1} {2} {3} {4} {5} {6} {7} {8}", userRole, caseName, primaryDemand, demand, subDemand, customer, policyReference, caseDueDate, product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 117
 testRunner.Then("User calls GetInfo API and validates product updates to Motor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 118
 testRunner.And("User overriddes the product and validates the changes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-94: Primary Product Identification - Prodcut does not change after refresh")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-9 feature")]
        [Xunit.TraitAttribute("Description", "Work-94: Primary Product Identification - Prodcut does not change after refresh")]
        [Xunit.TraitAttribute("Category", "work-94")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.InlineDataAttribute("\'Caseworker\'", "\'TaskDueDate2\'", "\'I want to change\'", "\'Motor change\'", "\'Add Driver\'", "\'sarah marta\'", "\'Property\'", "\'PL-HOM10003493441/00\'", "\'10/10/2024\'", "5", new string[0])]
        public void Work_94PrimaryProductIdentification_ProdcutDoesNotChangeAfterRefresh(string userRole, string caseName, string primaryDemand, string demand, string subDemand, string customer, string product, string policyReference, string caseDueDate, string numberOfDays, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-94",
                    "admin"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseDueDate", caseDueDate);
            argumentsOfScenario.Add("numberOfDays", numberOfDays);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-94: Primary Product Identification - Prodcut does not change after refresh", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 125
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 126
 testRunner.Given("User fetch policy number from Merlin where policy has product Motor and Building " +
                        "works", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 127
 testRunner.And("User logged in to Dynamics application with \'Admin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 128
 testRunner.When("User selects customer service hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 129
 testRunner.And(string.Format("User {0} creates new case {1} {2} {3} {4} {5} {6} {7} {8}", userRole, caseName, primaryDemand, demand, subDemand, customer, policyReference, caseDueDate, product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 130
 testRunner.Then("User calls GetInfo API and validates product updates to Motor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 131
 testRunner.And("User overriddes the product and validates the changes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 132
 testRunner.And("User calls the GetInfo API and validates product not changed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Work-94: Primary Product Identification - Prodcut label changed to Primary Produc" +
            "t")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-9 feature")]
        [Xunit.TraitAttribute("Description", "Work-94: Primary Product Identification - Prodcut label changed to Primary Produc" +
            "t")]
        [Xunit.TraitAttribute("Category", "work-94")]
        [Xunit.TraitAttribute("Category", "admin")]
        public void Work_94PrimaryProductIdentification_ProdcutLabelChangedToPrimaryProduct()
        {
            string[] tagsOfScenario = new string[] {
                    "work-94",
                    "admin"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-94: Primary Product Identification - Prodcut label changed to Primary Produc" +
                    "t", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 139
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 140
 testRunner.Given("User logged in to Dynamics application with \'Admin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 141
 testRunner.When("User selects customer service hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 142
 testRunner.And("User clicks on Cases and new case", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 143
 testRunner.Then("User valdates the label Primary Product is visiable on summary screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Work20 - Automatic Email Triage (Routing)")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-9 feature")]
        [Xunit.TraitAttribute("Description", "Work20 - Automatic Email Triage (Routing)")]
        [Xunit.TraitAttribute("Category", "work-20")]
        [Xunit.TraitAttribute("Category", "admin")]
        public void Work20_AutomaticEmailTriageRouting()
        {
            string[] tagsOfScenario = new string[] {
                    "work-20",
                    "admin"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work20 - Automatic Email Triage (Routing)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 146
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "sender",
                            "to",
                            "subject",
                            "body",
                            "attachment"});
                table35.AddRow(new string[] {
                            "\'Tonysmithtest\'",
                            "\'Test_WF_BFT_EB\'",
                            "\'BFT manual triage queue\'",
                            "\'BFT manual triage queue\'",
                            "\'No\'"});
                table35.AddRow(new string[] {
                            "\'Tonysmithtest\'",
                            "\'Test_WF_CEC_EB\'",
                            "\'CEC manual triage queue\'",
                            "\'CEC manual triage queue\'",
                            "\'No\'"});
                table35.AddRow(new string[] {
                            "\'Tonysmithtest\'",
                            "\'Test_WF_HPC_EB\'",
                            "\'HPC manual triage queue\'",
                            "\'HPC manual triage queue\'",
                            "\'No\'"});
                table35.AddRow(new string[] {
                            "\'Tonysmithtest\'",
                            "\'Test_WF_SD_EB\'",
                            "\'SD manual triage queue\'",
                            "\'SD manual triage queue\'",
                            "\'No\'"});
                table35.AddRow(new string[] {
                            "\'Tonysmithtest\'",
                            "\'Test_WF_TRAD_EB\'",
                            "\'Trading manual triage queue\'",
                            "\'Trading manual triage queue\'",
                            "\'No\'"});
#line 147
 testRunner.Given("User sends an email to UKSC mailbox", ((string)(null)), table35, "Given ");
#line hidden
#line 154
 testRunner.And("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 155
 testRunner.When("User selects customer service hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "subject",
                            "body"});
                table36.AddRow(new string[] {
                            "\'BFT manual triage queue\'",
                            "\'BFT manual triage queue\'"});
                table36.AddRow(new string[] {
                            "\'CEC manual triage queue\'",
                            "\'CEC manual triage queue\'"});
                table36.AddRow(new string[] {
                            "\'HPC manual triage queue\'",
                            "\'HPC manual triage queue\'"});
                table36.AddRow(new string[] {
                            "\'SD manual triage queue\'",
                            "\'SD manual triage queue\'"});
                table36.AddRow(new string[] {
                            "\'Trading manual triage queue\'",
                            "\'Trading manual triage queue\'"});
#line 156
 testRunner.Then("User search and validates the email content with the below", ((string)(null)), table36, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work23 - Automatic Routing of Cases to Queues")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-9 feature")]
        [Xunit.TraitAttribute("Description", "Work23 - Automatic Routing of Cases to Queues")]
        [Xunit.TraitAttribute("Category", "work-23")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.InlineDataAttribute("\'UK Service Centre Case\'", "\'Caseworker\'", "\'CWwork56A\'", "\'I want information\'", "\'Documents\'", "\'Send Certificate\'", "\'sarah marta\'", "\'Motor\'", "\'PL-HOM10003488945/00\'", "\'10/10/2024\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Customer Experience Centre Case\'", "\'Caseworker\'", "\'CWwork56B\'", "\'I want to change\'", "\'Motor change\'", "\'Add Driver\'", "\'sarah marta\'", "\'Property\'", "\'PL-HOM10003512888/00\'", "\'10/10/2024\'", new string[0])]
        [Xunit.InlineDataAttribute("\'Hiscox Private Client Case\'", "\'Caseworker\'", "\'CWwork56C\'", "\'I want to renew\'", "\'Renewal\'", "\'Review Renewal\'", "\'sarah marta\'", "\'Building works\'", "\'PL-HOM05006561234/04\'", "\'10/10/2024\'", new string[0])]
        public void Work23_AutomaticRoutingOfCasesToQueues(string queue, string userRole, string caseName, string primaryDemand, string demand, string subDemand, string customer, string product, string policyReference, string caseDueDate, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-23",
                    "admin"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Queue", queue);
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("CaseName", caseName);
            argumentsOfScenario.Add("PrimaryDemand", primaryDemand);
            argumentsOfScenario.Add("Demand", demand);
            argumentsOfScenario.Add("SubDemand", subDemand);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("PolicyReference", policyReference);
            argumentsOfScenario.Add("CaseDueDate", caseDueDate);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work23 - Automatic Routing of Cases to Queues", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 165
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 166
 testRunner.Given(string.Format("User logged in to Dynamics application with {0}", userRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 167
 testRunner.When("User navigates to Customer Service hub", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 168
 testRunner.When(string.Format("User {0} creates new case {1} {2} {3} {4} {5} {6} {7} {8}", userRole, caseName, primaryDemand, demand, subDemand, customer, policyReference, caseDueDate, product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 169
 testRunner.Then("User clicks on save&route button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 170
 testRunner.Then(string.Format("User selects newly created case {0}", caseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 171
 testRunner.When("User click on Queue Items Details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 172
 testRunner.Then(string.Format("User Validate the case is assigned automatically assigned to respective {0}", queue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Work-94")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-9 feature")]
        [Xunit.TraitAttribute("Description", "Work-94")]
        [Xunit.TraitAttribute("Category", "work-94")]
        public void Work_94()
        {
            string[] tagsOfScenario = new string[] {
                    "work-94"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-94", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 183
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-64 caseworker")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-9 feature")]
        [Xunit.TraitAttribute("Description", "Work-64 caseworker")]
        [Xunit.TraitAttribute("Category", "work-64")]
        [Xunit.TraitAttribute("Category", "caseworker")]
        [Xunit.InlineDataAttribute("\'Caseworker\'", "\'PL-HOM10002898598/05\'", "\'Raja\'", "\'Dhoni\'", new string[0])]
        public void Work_64Caseworker(string userRole, string policy, string firstName, string lastName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-64",
                    "caseworker"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("Policy", policy);
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("LastName", lastName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-64 caseworker", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 186
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 187
 testRunner.Given(string.Format("User logged in to Dynamics application with {0}", userRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 188
 testRunner.And("User Clicks on Policies from Service AreaGroup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 189
 testRunner.When(string.Format("User searches the policy from search bar and clicks on it {0}", policy), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 190
 testRunner.And("Check whether fields are displaying for policy screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 191
 testRunner.Then("Check Whether it\'s read-only", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 193
 testRunner.When("User clicks on contact", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 194
 testRunner.Then(string.Format("User selects the existing contact with firstName {0} and lastName {1}", firstName, lastName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 195
 testRunner.And("User checks whether fields are displaying for contact screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 196
 testRunner.Then("Check Whether it\'s read-only", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Work-64 admin")]
        [Xunit.TraitAttribute("FeatureTitle", "WORK Sprint-9 feature")]
        [Xunit.TraitAttribute("Description", "Work-64 admin")]
        [Xunit.TraitAttribute("Category", "work-64")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.InlineDataAttribute("\'Caseworker\'", "\'PL-HOM10002898598/05\'", "\'Raja\'", "\'Dhoni\'", new string[0])]
        public void Work_64Admin(string userRole, string policy, string firstName, string lastName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "work-64",
                    "admin"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userRole", userRole);
            argumentsOfScenario.Add("Policy", policy);
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("LastName", lastName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Work-64 admin", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 205
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 206
 testRunner.Given("User logged in to Dynamics application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 207
 testRunner.When("User selects customer service hub from Dynamics Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 208
 testRunner.Given("User Clicks on Policies from Service AreaGroup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 210
 testRunner.Given("User Clicks on Policies from Service AreaGroup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 211
 testRunner.When(string.Format("User searches the policy from search bar and clicks on it {0}", policy), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 212
 testRunner.Then("User deletes the policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 215
 testRunner.When("User clicks on contact", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 216
 testRunner.Then("User clicks on New", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 218
 testRunner.Then(string.Format("User selects the existing contact with firstName {0} and lastName {1}", firstName, lastName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 219
    testRunner.Then("User deletes the contact", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                WORKSprint_9FeatureFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                WORKSprint_9FeatureFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
